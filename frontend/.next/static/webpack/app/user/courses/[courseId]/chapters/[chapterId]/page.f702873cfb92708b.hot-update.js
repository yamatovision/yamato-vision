"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/user/courses/[courseId]/chapters/[chapterId]/page",{

/***/ "(app-pages-browser)/./src/lib/api/courses.ts":
/*!********************************!*\
  !*** ./src/lib/api/courses.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   courseApi: function() { return /* binding */ courseApi; }\n/* harmony export */ });\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */ \"(app-pages-browser)/./src/lib/api/auth.ts\");\n\n// 定数とユーティリティ関数\nconst FRONTEND_API_BASE = \"http://localhost:3001/api\" || 0;\nconst getAuthHeaders = ()=>{\n    const token = localStorage.getItem(\"auth_token\");\n    return {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token ? \"Bearer \".concat(token) : \"\"\n    };\n};\nconst courseApi = {\n    // コース一覧取得\n    getCourses: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses?published=all\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch courses\");\n            }\n            const result = await response.json();\n            console.log(\"Courses API response:\", result); // デバッグ用\n            // レスポンス形式のチェック\n            if (!result || !result.success || !Array.isArray(result.data)) {\n                console.error(\"Unexpected response format:\", result);\n                throw new Error(\"Invalid courses data format\");\n            }\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"Error fetching courses:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCourse: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch course: \".concat(response.statusText));\n            }\n            const data = await response.json();\n            return data; // レスポンスをそのまま返せる\n        } catch (error) {\n            console.error(\"Error in getCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCurrentChapter: async (courseId)=>{\n        try {\n            // APIのベースURLを修正\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/current-chapter\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current chapter\");\n            }\n            const data = await response.json();\n            if (!data.success || !data.data) {\n                throw new Error(data.message || \"Invalid response format\");\n            }\n            const currentChapter = data.data;\n            return {\n                success: true,\n                data: {\n                    chapterId: currentChapter.id,\n                    courseId: courseId,\n                    nextUrl: \"/user/courses/\".concat(courseId, \"/chapters/\").concat(currentChapter.id),\n                    chapter: currentChapter\n                }\n            };\n        } catch (error) {\n            console.error(\"Error fetching current chapter:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // コース作成\n    createCourse: async (data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        return {\n            data: result.data\n        };\n    },\n    // コース更新\n    // lib/api/courses.ts\n    updateCourse: async (courseId, data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.message || \"Failed to update course\");\n        }\n        const result = await response.json();\n        return result;\n    },\n    // コース削除\n    deleteCourse: async (courseId)=>{\n        await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        return {\n            success: true\n        };\n    },\n    // 利用可能なコース一覧取得\n    getAvailableCourses: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/available\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch courses\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch courses:\", error);\n            throw error;\n        }\n    },\n    // コース開始\n    startCourse: async (courseId)=>{\n        try {\n            console.log(\"Sending start course request for:\", courseId);\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            const result = await response.json();\n            console.log(\"Start course response:\", result);\n            if (!response.ok) {\n                throw new Error(result.message || \"Failed to start course\");\n            }\n            return {\n                success: true,\n                data: result\n            };\n        } catch (error) {\n            console.error(\"Error in startCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // ユーザーの受講コース一覧取得\n    getUserCourses: async ()=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/users/courses/enrolled\"), {\n            headers: getAuthHeaders()\n        });\n        const data = await response.json();\n        return {\n            success: true,\n            data: data\n        };\n    },\n    // チャプター関連のAPI\n    // src/lib/api/courses.ts の getChapter メソッドを修正\n    getChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                return {\n                    success: false,\n                    data: null,\n                    error: \"Failed to fetch chapter\"\n                };\n            }\n            const responseData = await response.json();\n            return {\n                success: true,\n                data: responseData.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error occurred\"\n            };\n        }\n    },\n    // チャプター完了処理\n    completeChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/complete\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to complete chapter\");\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Failed to complete chapter:\", error);\n            throw error;\n        }\n    },\n    // courses.ts\n    getCurrentUserCourse: async (courseId)=>{\n        try {\n            const endpoint = courseId ? \"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/progress\") : \"\".concat(FRONTEND_API_BASE, \"/courses/user/current\"); // 現在のコースを取得するエンドポイント\n            const response = await fetch(endpoint, {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current course\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch current course:\", error);\n            return {\n                success: false,\n                data: null,\n                message: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // src/lib/api/courses.ts に追加\n    startChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to start chapter\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // チャプター更新\n    updateChapter: async (courseId, chapterId, data)=>{\n        try {\n            const { waitTime, ...restData } = data;\n            const updatedData = {\n                ...restData,\n                releaseTime: data.releaseTime || waitTime,\n                task: {\n                    ...data.task,\n                    referenceText: data.task.referenceText || \"\"\n                }\n            };\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters/\").concat(chapterId), {\n                method: \"PUT\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(updatedData)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update chapter\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    updateMaterialProgress: async (courseId, chapterId, materialId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/materials/\").concat(materialId, \"/progress\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update material progress\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    createChapter: async (courseId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to create chapter\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // チャプター削除\n    deleteChapter: async (courseId, chapterId)=>{\n        await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].delete(\"/admin/courses/\".concat(courseId, \"/chapters/\").concat(chapterId));\n        return {\n            success: true\n        };\n    },\n    // チャプター順序更新\n    updateChaptersOrder: async (courseId, chapters)=>{\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId, \"/chapters/reorder\"), {\n            chapters\n        });\n        return {\n            data: response.data.data\n        };\n    },\n    // 公開状態管理\n    publishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to publish course:\", error);\n            throw error;\n        }\n    },\n    unpublishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: false\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to unpublish course:\", error);\n            throw error;\n        }\n    },\n    archiveCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isArchived: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to archive course:\", error);\n            throw error;\n        }\n    },\n    // courses.ts の submitTask メソッドを修正\n    submitTask: async (courseId, chapterId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/submit\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Failed to submit task\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"Task submission error:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXBpL2NvdXJzZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUI7QUF5RHpCLGVBQWU7QUFDZixNQUFNQyxvQkFBb0JDLDJCQUErQixJQUFJO0FBRTdELE1BQU1HLGlCQUFpQjtJQUNyQixNQUFNQyxRQUFRQyxhQUFhQyxPQUFPLENBQUM7SUFDbkMsT0FBTztRQUNMLGdCQUFnQjtRQUNoQixpQkFBaUJGLFFBQVEsVUFBZ0IsT0FBTkEsU0FBVTtJQUMvQztBQUNGO0FBR08sTUFBTUcsWUFBWTtJQUN2QixVQUFVO0lBS1ZDLFlBQVk7UUFDVixJQUFJO1lBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUNyQixHQUFxQixPQUFsQlgsbUJBQWtCLGlDQUNyQjtnQkFDRVksU0FBU1I7WUFDWDtZQUdGLElBQUksQ0FBQ00sU0FBU0csRUFBRSxFQUFFO2dCQUNoQixNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFFQSxNQUFNQyxTQUFTLE1BQU1MLFNBQVNNLElBQUk7WUFDbENDLFFBQVFDLEdBQUcsQ0FBQyx5QkFBeUJILFNBQVMsUUFBUTtZQUV0RCxlQUFlO1lBQ2YsSUFBSSxDQUFDQSxVQUFVLENBQUNBLE9BQU9JLE9BQU8sSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUNOLE9BQU9PLElBQUksR0FBRztnQkFDN0RMLFFBQVFNLEtBQUssQ0FBQywrQkFBK0JSO2dCQUM3QyxNQUFNLElBQUlELE1BQU07WUFDbEI7WUFFQSxPQUFPO2dCQUNMSyxTQUFTO2dCQUNURyxNQUFNUCxPQUFPTyxJQUFJO1lBQ25CO1FBRUYsRUFBRSxPQUFPQyxPQUFPO1lBQ2ROLFFBQVFNLEtBQUssQ0FBQywyQkFBMkJBO1lBQ3pDLE9BQU87Z0JBQ0xKLFNBQVM7Z0JBQ1RHLE1BQU07Z0JBQ05DLE9BQU9BLGlCQUFpQlQsUUFBUVMsTUFBTUMsT0FBTyxHQUFHO1lBQ2xEO1FBQ0Y7SUFDRjtJQU9BQyxXQUFXLE9BQU9DO1FBQ2hCLElBQUk7WUFDRixNQUFN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QyxVQUNBSyxXQUNBVDtRQW1CQSxJQUFJO1lBQ0YsTUFBTVosV0FBVyxNQUFNQyxNQUNyQixHQUFnQ2UsT0FBN0IxQixtQkFBa0IsYUFBZ0MrQixPQUFyQkwsVUFBUyxjQUFzQixPQUFWSyxXQUFVLFlBQy9EO2dCQUNFSyxRQUFRO2dCQUNSeEIsU0FBU1I7Z0JBQ1RpQyxNQUFNQyxLQUFLQyxTQUFTLENBQUNqQjtZQUN2QjtZQUdGLElBQUksQ0FBQ1osU0FBU0csRUFBRSxFQUFFO2dCQUNoQixNQUFNMkQsWUFBWSxNQUFNOUQsU0FBU00sSUFBSTtnQkFDckMsTUFBTSxJQUFJRixNQUFNMEQsVUFBVWhELE9BQU8sSUFBSTtZQUN2QztZQUVBLE1BQU1ULFNBQVMsTUFBTUwsU0FBU00sSUFBSTtZQUNsQyxPQUFPO2dCQUNMRyxTQUFTO2dCQUNURyxNQUFNUCxPQUFPTyxJQUFJO1lBQ25CO1FBQ0YsRUFBRSxPQUFPQyxPQUFPO1lBQ2ROLFFBQVFNLEtBQUssQ0FBQywwQkFBMEJBO1lBQ3hDLE9BQU87Z0JBQ0xKLFNBQVM7Z0JBQ1RHLE1BQU07Z0JBQ05DLE9BQU9BLGlCQUFpQlQsUUFBUVMsTUFBTUMsT0FBTyxHQUFHO1lBQ2xEO1FBQ0Y7SUFDRjtBQUNBLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9hcGkvY291cnNlcy50cz83YzVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSAnLi9hdXRoJztcbmltcG9ydCB7IEFQSVJlc3BvbnNlIH0gZnJvbSAnQC90eXBlcy9hcGknO1xuaW1wb3J0IHsgaGFuZGxlQXBpRXJyb3IgfSBmcm9tICcuL2Vycm9ySGFuZGxlcic7XG5cbmltcG9ydCB7IFxuICBDb3Vyc2UsIFxuICBDaGFwdGVyLFxuICBDcmVhdGVDb3Vyc2VEVE8sIFxuICBVcGRhdGVDb3Vyc2VEVE8sIFxuICBDcmVhdGVDaGFwdGVyRFRPLFxuICBDb3Vyc2VTdGF0dXMsXG59IGZyb20gJ0AvdHlwZXMvY291cnNlJztcblxuLy8g44Kk44Oz44K/44O844OV44Kn44O844K55a6a576pXG5pbnRlcmZhY2UgQmFzZVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgbWVzc2FnZT86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIENvdXJzZVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgZGF0YTogQ291cnNlO1xufVxuXG5pbnRlcmZhY2UgQ291cnNlTGlzdFJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgZGF0YTogKENvdXJzZSAmIHtcbiAgICBzdGF0dXM6IENvdXJzZVN0YXR1cztcbiAgICBjaGFwdGVycz86IENoYXB0ZXJbXTtcbiAgfSlbXTtcbn1cblxuaW50ZXJmYWNlIENoYXB0ZXJSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gIGRhdGE6IENoYXB0ZXI7XG59XG5cbmludGVyZmFjZSBVc2VyQ291cnNlIHtcbiAgaWQ6IHN0cmluZztcbiAgY291cnNlSWQ6IHN0cmluZztcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcbiAgc3RhcnRlZEF0OiBEYXRlO1xuICBjb21wbGV0ZWRBdD86IERhdGU7XG59XG5cblxuaW50ZXJmYWNlIEN1cnJlbnRDb3Vyc2VSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gIGRhdGE6IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGNvdXJzZUlkOiBzdHJpbmc7XG4gICAgY2hhcHRlcnM6IHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICBvcmRlckluZGV4OiBudW1iZXI7XG4gICAgICB0aXRsZTogc3RyaW5nO1xuICAgIH1bXTtcbiAgICBwcm9ncmVzczogbnVtYmVyO1xuICAgIHN0YXJ0ZWRBdDogRGF0ZTtcbiAgfTtcbn1cblxuLy8g5a6a5pWw44Go44Om44O844OG44Kj44Oq44OG44Kj6Zai5pWwXG5jb25zdCBGUk9OVEVORF9BUElfQkFTRSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGknO1xuXG5jb25zdCBnZXRBdXRoSGVhZGVycyA9ICgpID0+IHtcbiAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXV0aF90b2tlbicpO1xuICByZXR1cm4ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlbiA/IGBCZWFyZXIgJHt0b2tlbn1gIDogJycsXG4gIH07XG59O1xuXG5cbmV4cG9ydCBjb25zdCBjb3Vyc2VBcGkgPSB7XG4gIC8vIOOCs+ODvOOCueS4gOimp+WPluW+l1xuXG5cblxuXG4gIGdldENvdXJzZXM6IGFzeW5jICgpOiBQcm9taXNlPEFQSVJlc3BvbnNlPENvdXJzZVtdPj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vYWRtaW4vY291cnNlcz9wdWJsaXNoZWQ9YWxsYCwgXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgICB9XG4gICAgICApO1xuICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggY291cnNlcycpO1xuICAgICAgfVxuICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKCdDb3Vyc2VzIEFQSSByZXNwb25zZTonLCByZXN1bHQpOyAvLyDjg4fjg5Djg4PjgrDnlKhcbiAgXG4gICAgICAvLyDjg6zjgrnjg53jg7PjgrnlvaLlvI/jga7jg4Hjgqfjg4Pjgq9cbiAgICAgIGlmICghcmVzdWx0IHx8ICFyZXN1bHQuc3VjY2VzcyB8fCAhQXJyYXkuaXNBcnJheShyZXN1bHQuZGF0YSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCByZXNwb25zZSBmb3JtYXQ6JywgcmVzdWx0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvdXJzZXMgZGF0YSBmb3JtYXQnKTtcbiAgICAgIH1cbiAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGF0YVxuICAgICAgfTtcbiAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGNvdXJzZXM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuXG5cblxuXG5cbiAgZ2V0Q291cnNlOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZyk6IFByb21pc2U8QVBJUmVzcG9uc2U8Q291cnNlPj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vYWRtaW4vY291cnNlcy8ke2NvdXJzZUlkfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgICB9XG4gICAgICApO1xuICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggY291cnNlOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICB9XG4gIFxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhOyAvLyDjg6zjgrnjg53jg7PjgrnjgpLjgZ3jga7jgb7jgb7ov5TjgZvjgotcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gZ2V0Q291cnNlOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0Q3VycmVudENoYXB0ZXI6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxBUElSZXNwb25zZTx7XG4gIGNoYXB0ZXJJZDogc3RyaW5nO1xuICBjb3Vyc2VJZDogc3RyaW5nO1xuICBuZXh0VXJsOiBzdHJpbmc7XG4gIGNoYXB0ZXI6IENoYXB0ZXI7XG59Pj4gPT4ge1xuICB0cnkge1xuICAgIC8vIEFQSeOBruODmeODvOOCuVVSTOOCkuS/ruato1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vY291cnNlcy91c2VyLyR7Y291cnNlSWR9L2N1cnJlbnQtY2hhcHRlcmAsXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZSdcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggY3VycmVudCBjaGFwdGVyJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBpZiAoIWRhdGEuc3VjY2VzcyB8fCAhZGF0YS5kYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5tZXNzYWdlIHx8ICdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRDaGFwdGVyID0gZGF0YS5kYXRhO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBjaGFwdGVySWQ6IGN1cnJlbnRDaGFwdGVyLmlkLFxuICAgICAgICBjb3Vyc2VJZDogY291cnNlSWQsXG4gICAgICAgIG5leHRVcmw6IGAvdXNlci9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y3VycmVudENoYXB0ZXIuaWR9YCxcbiAgICAgICAgY2hhcHRlcjogY3VycmVudENoYXB0ZXJcbiAgICAgIH1cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGN1cnJlbnQgY2hhcHRlcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgXG4gICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgfTtcbiAgfVxufSxcblxuICAvLyDjgrPjg7zjgrnkvZzmiJBcbiAgY3JlYXRlQ291cnNlOiBhc3luYyAoZGF0YTogQ3JlYXRlQ291cnNlRFRPKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9hZG1pbi9jb3Vyc2VzYCxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdC5kYXRhIH07XG4gIH0sXG5cbiAgLy8g44Kz44O844K55pu05pawXG4vLyBsaWIvYXBpL2NvdXJzZXMudHNcbnVwZGF0ZUNvdXJzZTogYXN5bmMgKGNvdXJzZUlkOiBzdHJpbmcsIGRhdGE6IFVwZGF0ZUNvdXJzZURUTykgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9YCxcbiAgICB7XG4gICAgICBtZXRob2Q6ICdQVVQnLCAvLyBQQVRDSOOBi+OCiVBVVOOBq+WkieabtFxuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH1cbiAgKTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyb3IgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgY291cnNlJyk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAvLyDjgrPjg7zjgrnliYrpmaRcbiAgZGVsZXRlQ291cnNlOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IGZldGNoKFxuICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH1gLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICB9LFxuXG4gIC8vIOWIqeeUqOWPr+iDveOBquOCs+ODvOOCueS4gOimp+WPluW+l1xuICBnZXRBdmFpbGFibGVDb3Vyc2VzOiBhc3luYyAoKTogUHJvbWlzZTxDb3Vyc2VMaXN0UmVzcG9uc2U+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2NvdXJzZXMvdXNlci9hdmFpbGFibGVgLFxuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBjb3Vyc2VzJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4geyBcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIGNvdXJzZXM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuXG5cbiAgLy8g44Kz44O844K56ZaL5aeLXG4gIHN0YXJ0Q291cnNlOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZyk6IFByb21pc2U8QVBJUmVzcG9uc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhOiBhbnkgfT4+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ1NlbmRpbmcgc3RhcnQgY291cnNlIHJlcXVlc3QgZm9yOicsIGNvdXJzZUlkKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9jb3Vyc2VzL3VzZXIvJHtjb3Vyc2VJZH0vc3RhcnRgLFxuICAgICAgICB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKCdTdGFydCBjb3Vyc2UgcmVzcG9uc2U6JywgcmVzdWx0KTtcbiAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHN0YXJ0IGNvdXJzZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICBkYXRhOiByZXN1bHQgXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzdGFydENvdXJzZTonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgLy8g44Om44O844K244O844Gu5Y+X6Kyb44Kz44O844K55LiA6Kan5Y+W5b6XXG4gIGdldFVzZXJDb3Vyc2VzOiBhc3luYyAoKTogUHJvbWlzZTxDb3Vyc2VMaXN0UmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L3VzZXJzL2NvdXJzZXMvZW5yb2xsZWRgLFxuICAgICAge1xuICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBkYXRhIH07XG4gIH0sXG5cblxuICAvLyDjg4Hjg6Pjg5fjgr/jg7zplqLpgKPjga5BUElcbiAgLy8gc3JjL2xpYi9hcGkvY291cnNlcy50cyDjga4gZ2V0Q2hhcHRlciDjg6Hjgr3jg4Pjg4njgpLkv67mraNcbmdldENoYXB0ZXI6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nLCBjaGFwdGVySWQ6IHN0cmluZyk6IFByb21pc2U8QVBJUmVzcG9uc2U8Q2hhcHRlcj4+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vY2hhcHRlcnMvJHtjaGFwdGVySWR9YCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggY2hhcHRlcidcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiB7IFxuICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICBkYXRhOiByZXNwb25zZURhdGEuZGF0YSBcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IFxuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3Igb2NjdXJyZWQnXG4gICAgfTtcbiAgfVxufSxcblxuICAvLyDjg4Hjg6Pjg5fjgr/jg7zlrozkuoblh6bnkIZcbiAgY29tcGxldGVDaGFwdGVyOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZywgY2hhcHRlcklkOiBzdHJpbmcpOiBQcm9taXNlPEFQSVJlc3BvbnNlPHsgbmV4dENoYXB0ZXI6IENoYXB0ZXIgfCBudWxsIH0+PiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y2hhcHRlcklkfS9jb21wbGV0ZWAsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNvbXBsZXRlIGNoYXB0ZXInKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29tcGxldGUgY2hhcHRlcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAvLyBjb3Vyc2VzLnRzXG5nZXRDdXJyZW50VXNlckNvdXJzZTogYXN5bmMgKGNvdXJzZUlkPzogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBjb3Vyc2VJZCBcbiAgICAgID8gYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2NvdXJzZXMvdXNlci8ke2NvdXJzZUlkfS9wcm9ncmVzc2BcbiAgICAgIDogYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2NvdXJzZXMvdXNlci9jdXJyZW50YDsgIC8vIOePvuWcqOOBruOCs+ODvOOCueOCkuWPluW+l+OBmeOCi+OCqOODs+ODieODneOCpOODs+ODiFxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGVuZHBvaW50LFxuICAgICAge1xuICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBjdXJyZW50IGNvdXJzZScpO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBkYXRhLmRhdGFcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBjdXJyZW50IGNvdXJzZTonLCBlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIG1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgfTtcbiAgfVxufSxcblxuLy8gc3JjL2xpYi9hcGkvY291cnNlcy50cyDjgavov73liqBcbnN0YXJ0Q2hhcHRlcjogYXN5bmMgKGNvdXJzZUlkOiBzdHJpbmcsIGNoYXB0ZXJJZDogc3RyaW5nKTogUHJvbWlzZTxBUElSZXNwb25zZTxhbnk+PiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y2hhcHRlcklkfS9zdGFydGAsXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzdGFydCBjaGFwdGVyJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IGRhdGEuZGF0YVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgIH07XG4gIH1cbn0sXG5cbi8vIOODgeODo+ODl+OCv+ODvOabtOaWsFxudXBkYXRlQ2hhcHRlcjogYXN5bmMgKFxuICBjb3Vyc2VJZDogc3RyaW5nLCBcbiAgY2hhcHRlcklkOiBzdHJpbmcsIFxuICBkYXRhOiBVcGRhdGVDaGFwdGVyRFRPXG4pOiBQcm9taXNlPEFQSVJlc3BvbnNlPENoYXB0ZXI+PiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB3YWl0VGltZSwgLi4ucmVzdERhdGEgfSA9IGRhdGE7XG4gICAgY29uc3QgdXBkYXRlZERhdGEgPSB7XG4gICAgICAuLi5yZXN0RGF0YSxcbiAgICAgIHJlbGVhc2VUaW1lOiBkYXRhLnJlbGVhc2VUaW1lIHx8IHdhaXRUaW1lLFxuICAgICAgdGFzazoge1xuICAgICAgICAuLi5kYXRhLnRhc2ssXG4gICAgICAgIHJlZmVyZW5jZVRleHQ6IGRhdGEudGFzay5yZWZlcmVuY2VUZXh0IHx8ICcnXG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vYWRtaW4vY291cnNlcy8ke2NvdXJzZUlkfS9jaGFwdGVycy8ke2NoYXB0ZXJJZH1gLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1cGRhdGVkRGF0YSlcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIGNoYXB0ZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgIH07XG4gIH1cbn0sXG5cbnVwZGF0ZU1hdGVyaWFsUHJvZ3Jlc3M6IGFzeW5jIChcbiAgY291cnNlSWQ6IHN0cmluZyxcbiAgY2hhcHRlcklkOiBzdHJpbmcsXG4gIG1hdGVyaWFsSWQ6IHN0cmluZyxcbiAgZGF0YTogeyAgLy8g44GT44Gu44OH44O844K/5Z6L44KS6L+95YqgXG4gICAgY29tcGxldGVkOiBib29sZWFuO1xuICAgIGxhc3RBY2Nlc3NlZEF0OiBEYXRlO1xuICB9XG4pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vY2hhcHRlcnMvJHtjaGFwdGVySWR9L21hdGVyaWFscy8ke21hdGVyaWFsSWR9L3Byb2dyZXNzYCxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICB9XG4gICAgKTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHVwZGF0ZSBtYXRlcmlhbCBwcm9ncmVzcycpO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgfTtcbiAgfVxufSxcblxuICBjcmVhdGVDaGFwdGVyOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZywgZGF0YTogQ3JlYXRlQ2hhcHRlckRUTyk6IFByb21pc2U8QVBJUmVzcG9uc2U8Q2hhcHRlcj4+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH0vY2hhcHRlcnNgLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGNoYXB0ZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgIH07XG4gIH1cbn0sXG5cbiAgLy8g44OB44Oj44OX44K/44O85YmK6ZmkXG4gIGRlbGV0ZUNoYXB0ZXI6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nLCBjaGFwdGVySWQ6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IGFwaS5kZWxldGUoYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y2hhcHRlcklkfWApO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgfSxcblxuICAvLyDjg4Hjg6Pjg5fjgr/jg7zpoIbluo/mm7TmlrBcbiAgdXBkYXRlQ2hhcHRlcnNPcmRlcjogYXN5bmMgKFxuICAgIGNvdXJzZUlkOiBzdHJpbmcsIFxuICAgIGNoYXB0ZXJzOiBBcnJheTx7IGlkOiBzdHJpbmc7IG9yZGVySW5kZXg6IG51bWJlciB9PlxuICApID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQ8Q291cnNlUmVzcG9uc2U+KFxuICAgICAgYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzL3Jlb3JkZXJgLFxuICAgICAgeyBjaGFwdGVycyB9XG4gICAgKTtcbiAgICByZXR1cm4geyBkYXRhOiByZXNwb25zZS5kYXRhLmRhdGEgfTtcbiAgfSxcbiAgLy8g5YWs6ZaL54q25oWL566h55CGXG4gIHB1Ymxpc2hDb3Vyc2U6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxDb3Vyc2VSZXNwb25zZT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQ8Q291cnNlUmVzcG9uc2U+KFxuICAgICAgICBgL2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH1gLFxuICAgICAgICB7IGlzUHVibGlzaGVkOiB0cnVlIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiByZXNwb25zZS5kYXRhLmRhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwdWJsaXNoIGNvdXJzZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAgdW5wdWJsaXNoQ291cnNlOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZyk6IFByb21pc2U8Q291cnNlUmVzcG9uc2U+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0PENvdXJzZVJlc3BvbnNlPihcbiAgICAgICAgYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9YCxcbiAgICAgICAgeyBpc1B1Ymxpc2hlZDogZmFsc2UgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEuZGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHVucHVibGlzaCBjb3Vyc2U6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuXG4gIGFyY2hpdmVDb3Vyc2U6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxDb3Vyc2VSZXNwb25zZT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQ8Q291cnNlUmVzcG9uc2U+KFxuICAgICAgICBgL2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH1gLFxuICAgICAgICB7IGlzQXJjaGl2ZWQ6IHRydWUgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEuZGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGFyY2hpdmUgY291cnNlOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcblxuICAvLyBjb3Vyc2VzLnRzIOOBriBzdWJtaXRUYXNrIOODoeOCveODg+ODieOCkuS/ruato1xuXG5zdWJtaXRUYXNrOiBhc3luYyAoXG4gIGNvdXJzZUlkOiBzdHJpbmcsXG4gIGNoYXB0ZXJJZDogc3RyaW5nLFxuICBkYXRhOiB7XG4gICAgc3VibWlzc2lvbjogc3RyaW5nOyAgICAgLy8g5o+Q5Ye65YaF5a65XG4gICAgbWF0ZXJpYWxzOiBzdHJpbmc7ICAgICAgLy8g5pWZ5p2Q5YaF5a65XG4gICAgdGFzazogc3RyaW5nOyAgICAgICAgICAvLyDoqrLpoYzlhoXlrrlcbiAgICBldmFsdWF0aW9uQ3JpdGVyaWE6IHN0cmluZzsgIC8vIOipleS+oeWfuua6llxuICB9XG4pOiBQcm9taXNlPEFQSVJlc3BvbnNlPHtcbiAgc3VibWlzc2lvbjoge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgY29udGVudDogc3RyaW5nO1xuICAgIHBvaW50czogbnVtYmVyO1xuICAgIGZlZWRiYWNrOiBzdHJpbmc7XG4gIH07XG4gIGV2YWx1YXRpb246IHtcbiAgICB0b3RhbF9zY29yZTogbnVtYmVyO1xuICAgIGZlZWRiYWNrOiBzdHJpbmc7XG4gICAgbmV4dF9zdGVwOiBzdHJpbmc7XG4gIH07XG59Pj4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vY291cnNlcy8ke2NvdXJzZUlkfS9jaGFwdGVycy8ke2NoYXB0ZXJJZH0vc3VibWl0YCxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JEYXRhLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzdWJtaXQgdGFzaycpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHJlc3VsdC5kYXRhXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdUYXNrIHN1Ym1pc3Npb24gZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICB9O1xuICB9XG59XG59OyJdLCJuYW1lcyI6WyJhcGkiLCJGUk9OVEVORF9BUElfQkFTRSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwiZ2V0QXV0aEhlYWRlcnMiLCJ0b2tlbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjb3Vyc2VBcGkiLCJnZXRDb3Vyc2VzIiwicmVzcG9uc2UiLCJmZXRjaCIsImhlYWRlcnMiLCJvayIsIkVycm9yIiwicmVzdWx0IiwianNvbiIsImNvbnNvbGUiLCJsb2ciLCJzdWNjZXNzIiwiQXJyYXkiLCJpc0FycmF5IiwiZGF0YSIsImVycm9yIiwibWVzc2FnZSIsImdldENvdXJzZSIsImNvdXJzZUlkIiwic3RhdHVzVGV4dCIsImdldEN1cnJlbnRDaGFwdGVyIiwiY3JlZGVudGlhbHMiLCJjdXJyZW50Q2hhcHRlciIsImNoYXB0ZXJJZCIsImlkIiwibmV4dFVybCIsImNoYXB0ZXIiLCJjcmVhdGVDb3Vyc2UiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZUNvdXJzZSIsImRlbGV0ZUNvdXJzZSIsImdldEF2YWlsYWJsZUNvdXJzZXMiLCJzdGFydENvdXJzZSIsImdldFVzZXJDb3Vyc2VzIiwiZ2V0Q2hhcHRlciIsInJlc3BvbnNlRGF0YSIsImNvbXBsZXRlQ2hhcHRlciIsImdldEN1cnJlbnRVc2VyQ291cnNlIiwiZW5kcG9pbnQiLCJzdGFydENoYXB0ZXIiLCJ1cGRhdGVDaGFwdGVyIiwid2FpdFRpbWUiLCJyZXN0RGF0YSIsInVwZGF0ZWREYXRhIiwicmVsZWFzZVRpbWUiLCJ0YXNrIiwicmVmZXJlbmNlVGV4dCIsInVwZGF0ZU1hdGVyaWFsUHJvZ3Jlc3MiLCJtYXRlcmlhbElkIiwiY3JlYXRlQ2hhcHRlciIsImRlbGV0ZUNoYXB0ZXIiLCJkZWxldGUiLCJ1cGRhdGVDaGFwdGVyc09yZGVyIiwiY2hhcHRlcnMiLCJwdXQiLCJwdWJsaXNoQ291cnNlIiwiaXNQdWJsaXNoZWQiLCJ1bnB1Ymxpc2hDb3Vyc2UiLCJhcmNoaXZlQ291cnNlIiwiaXNBcmNoaXZlZCIsInN1Ym1pdFRhc2siLCJlcnJvckRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/courses.ts\n"));

/***/ })

});