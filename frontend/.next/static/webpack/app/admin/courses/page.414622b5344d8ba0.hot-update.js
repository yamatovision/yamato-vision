"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/courses/page",{

/***/ "(app-pages-browser)/./src/lib/api/courses.ts":
/*!********************************!*\
  !*** ./src/lib/api/courses.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   courseApi: function() { return /* binding */ courseApi; }\n/* harmony export */ });\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */ \"(app-pages-browser)/./src/lib/api/auth.ts\");\n/* harmony import */ var _errorHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errorHandler */ \"(app-pages-browser)/./src/lib/api/errorHandler.ts\");\n\n\n// 定数とユーティリティ関数\nconst FRONTEND_API_BASE = \"http://localhost:3001/api\" || 0;\nconst getAuthHeaders = ()=>{\n    const token = localStorage.getItem(\"auth_token\");\n    return {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token ? \"Bearer \".concat(token) : \"\"\n    };\n};\nconst courseApi = {\n    // コース一覧取得\n    getCourse: async (courseId)=>{\n        console.log(\"getCourse called with ID:\", courseId);\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n                headers: getAuthHeaders()\n            });\n            console.log(\"Response status:\", response.status);\n            if (!response.ok) {\n                console.error(\"Response not OK:\", response.status, response.statusText);\n                throw new Error(\"Failed to fetch course: \".concat(response.statusText));\n            }\n            const rawData = await response.json();\n            console.log(\"Raw response data:\", rawData);\n            // レスポンスデータを Course 型に変換\n            const course = {\n                id: rawData.id,\n                title: rawData.title,\n                description: rawData.description,\n                gemCost: rawData.gemCost || 0,\n                level: rawData.level || \"\",\n                levelRequired: rawData.levelRequired,\n                rankRequired: rawData.rankRequired,\n                timeLimit: rawData.timeLimit,\n                passingScore: rawData.passingScore,\n                excellentScore: rawData.excellentScore,\n                isPublished: rawData.isPublished || false,\n                isArchived: rawData.isArchived || false,\n                thumbnail: rawData.thumbnail,\n                publishedAt: rawData.publishedAt ? new Date(rawData.publishedAt) : undefined,\n                archivedAt: rawData.archivedAt ? new Date(rawData.archivedAt) : undefined,\n                createdAt: new Date(rawData.createdAt),\n                updatedAt: new Date(rawData.updatedAt),\n                chapters: Array.isArray(rawData.chapters) ? rawData.chapters : [],\n                status: \"available\" // デフォルトのステータス\n            };\n            console.log(\"Transformed course data:\", course);\n            return {\n                success: true,\n                data: course\n            };\n        } catch (error) {\n            console.error(\"Error in getCourse:\", {\n                courseId,\n                error: error instanceof Error ? error.message : \"Unknown error\",\n                stack: error instanceof Error ? error.stack : undefined\n            });\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCourse: async (courseId)=>{\n        console.log(\"getCourse called with ID:\", courseId); // 開始ログ\n        try {\n            console.log(\"Fetching from URL:\", \"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId));\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n                headers: getAuthHeaders()\n            });\n            console.log(\"Response status:\", response.status); // レスポンスステータス\n            if (!response.ok) {\n                console.error(\"Response not OK:\", response.status, response.statusText);\n                throw new Error(\"Failed to fetch course: \".concat(response.statusText));\n            }\n            const data = await response.json();\n            console.log(\"Response data:\", data); // レスポンスデータ\n            if (!data || !data.data) {\n                console.error(\"Invalid response format:\", data);\n                throw new Error(\"Invalid response format\");\n            }\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Error in getCourse:\", {\n                courseId,\n                error: error instanceof Error ? error.message : \"Unknown error\",\n                stack: error instanceof Error ? error.stack : undefined\n            });\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCurrentChapter: async (courseId)=>{\n        try {\n            // APIのベースURLを修正\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/current-chapter\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current chapter\");\n            }\n            const data = await response.json();\n            if (!data.success || !data.data) {\n                throw new Error(data.message || \"Invalid response format\");\n            }\n            const currentChapter = data.data;\n            return {\n                success: true,\n                data: {\n                    chapterId: currentChapter.id,\n                    courseId: courseId,\n                    nextUrl: \"/user/courses/\".concat(courseId, \"/chapters/\").concat(currentChapter.id),\n                    chapter: currentChapter\n                }\n            };\n        } catch (error) {\n            console.error(\"Error fetching current chapter:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // コース作成\n    createCourse: async (data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        return {\n            data: result.data\n        };\n    },\n    // コース更新\n    // lib/api/courses.ts\n    updateCourse: async (courseId, data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.message || \"Failed to update course\");\n        }\n        const result = await response.json();\n        return result;\n    },\n    // コース削除\n    deleteCourse: async (courseId)=>{\n        await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        return {\n            success: true\n        };\n    },\n    // 利用可能なコース一覧取得\n    getAvailableCourses: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/available\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch courses\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch courses:\", error);\n            throw error;\n        }\n    },\n    // コース購入\n    purchaseCourse: async (courseId)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/purchase\"), {\n            method: \"POST\",\n            headers: getAuthHeaders()\n        });\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.message || \"Failed to purchase course\");\n        }\n        return {\n            success: true,\n            data: result\n        };\n    },\n    // コース開始\n    startCourse: async (courseId)=>{\n        try {\n            console.log(\"Sending start course request for:\", courseId);\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            const result = await response.json();\n            console.log(\"Start course response:\", result);\n            if (!response.ok) {\n                throw new Error(result.message || \"Failed to start course\");\n            }\n            return {\n                success: true,\n                data: result\n            };\n        } catch (error) {\n            console.error(\"Error in startCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // ユーザーの受講コース一覧取得\n    getUserCourses: async ()=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/users/courses/enrolled\"), {\n            headers: getAuthHeaders()\n        });\n        const data = await response.json();\n        return {\n            success: true,\n            data: data\n        };\n    },\n    // チャプター関連のAPI\n    // src/lib/api/courses.ts の getChapter メソッドを修正\n    getChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                return {\n                    success: false,\n                    data: null,\n                    error: \"Failed to fetch chapter\"\n                };\n            }\n            const responseData = await response.json();\n            return {\n                success: true,\n                data: responseData.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error occurred\"\n            };\n        }\n    },\n    // チャプター完了処理\n    completeChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/complete\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to complete chapter\");\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Failed to complete chapter:\", error);\n            throw error;\n        }\n    },\n    // courses.ts\n    getCurrentUserCourse: async (courseId)=>{\n        try {\n            const endpoint = courseId ? \"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/progress\") : \"\".concat(FRONTEND_API_BASE, \"/courses/user/current\"); // 現在のコースを取得するエンドポイント\n            const response = await fetch(endpoint, {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current course\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch current course:\", error);\n            return {\n                success: false,\n                data: null,\n                message: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    expireArchiveAccess: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/courses/user/\".concat(courseId, \"/expire-archive\"));\n            return response.data;\n        } catch (error) {\n            throw (0,_errorHandler__WEBPACK_IMPORTED_MODULE_1__.handleApiError)(error);\n        }\n    },\n    // src/lib/api/courses.ts に追加\n    startChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to start chapter\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // repurchaseCourse メソッドの追加\n    repurchaseCourse: async (courseId)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/repurchase\"), {\n            method: \"POST\",\n            headers: getAuthHeaders()\n        });\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.message || \"Failed to repurchase course\");\n        }\n        return {\n            success: true,\n            data: result\n        };\n    },\n    // チャプター作成\n    createChapter: async (courseId, data)=>{\n        const { waitTime, ...restData } = data;\n        const createData = {\n            ...restData,\n            releaseTime: data.releaseTime || waitTime\n        };\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/admin/courses/\".concat(courseId, \"/chapters\"), createData);\n        return {\n            data: response.data.data\n        };\n    },\n    // チャプター更新\n    updateChapter: async (courseId, chapterId, data)=>{\n        const { waitTime, ...restData } = data;\n        const updatedData = {\n            ...restData,\n            releaseTime: data.releaseTime || waitTime\n        };\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId, \"/chapters/\").concat(chapterId), updatedData);\n        return {\n            data: response.data.data\n        };\n    },\n    // チャプター削除\n    deleteChapter: async (courseId, chapterId)=>{\n        await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].delete(\"/admin/courses/\".concat(courseId, \"/chapters/\").concat(chapterId));\n        return {\n            success: true\n        };\n    },\n    // チャプター順序更新\n    updateChaptersOrder: async (courseId, chapters)=>{\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId, \"/chapters/reorder\"), {\n            chapters\n        });\n        return {\n            data: response.data.data\n        };\n    },\n    // 公開状態管理\n    publishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to publish course:\", error);\n            throw error;\n        }\n    },\n    unpublishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: false\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to unpublish course:\", error);\n            throw error;\n        }\n    },\n    archiveCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isArchived: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to archive course:\", error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/courses.ts\n"));

/***/ })

});