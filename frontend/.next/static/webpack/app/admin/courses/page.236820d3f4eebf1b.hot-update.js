"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/courses/page",{

/***/ "(app-pages-browser)/./src/lib/api/courses.ts":
/*!********************************!*\
  !*** ./src/lib/api/courses.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   courseApi: function() { return /* binding */ courseApi; }\n/* harmony export */ });\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */ \"(app-pages-browser)/./src/lib/api/auth.ts\");\n/* harmony import */ var _errorHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errorHandler */ \"(app-pages-browser)/./src/lib/api/errorHandler.ts\");\n\n\n// 定数とユーティリティ関数\nconst FRONTEND_API_BASE = \"http://localhost:3001/api\" || 0;\nconst getAuthHeaders = ()=>{\n    const token = localStorage.getItem(\"auth_token\");\n    return {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token ? \"Bearer \".concat(token) : \"\"\n    };\n};\nconst courseApi = {\n    // コース一覧取得\n    getCourse: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch course: \".concat(response.statusText));\n            }\n            const data = await response.json();\n            return data; // レスポンスをそのまま返せる\n        } catch (error) {\n            console.error(\"Error in getCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCourse: async (courseId)=>{\n        try {\n            console.log(\"Fetching course with ID:\", courseId);\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch course: \".concat(response.statusText));\n            }\n            const rawData = await response.json();\n            console.log(\"Raw response:\", rawData);\n            // 日付文字列をDate型に変換する関数\n            const parseDate = (dateStr)=>dateStr ? new Date(dateStr) : undefined;\n            // レスポンスデータをCourse型に変換\n            const courseData = {\n                id: rawData.id,\n                title: rawData.title,\n                description: rawData.description,\n                thumbnail: rawData.thumbnail,\n                gemCost: rawData.gemCost || 0,\n                levelRequired: rawData.levelRequired || 0,\n                rankRequired: rawData.rankRequired || \"\",\n                timeLimit: rawData.timeLimit || 0,\n                passingScore: rawData.passingScore || 70,\n                excellentScore: rawData.excellentScore || 95,\n                isPublished: rawData.isPublished || false,\n                isArchived: rawData.isArchived || false,\n                publishedAt: parseDate(rawData.publishedAt),\n                archivedAt: parseDate(rawData.archivedAt),\n                createdAt: parseDate(rawData.createdAt) || new Date(),\n                updatedAt: parseDate(rawData.updatedAt) || new Date(),\n                chapters: rawData.chapters || [],\n                status: \"available\"\n            };\n            console.log(\"Transformed course data:\", courseData);\n            // APIResponse形式で返す\n            return {\n                success: true,\n                data: courseData\n            };\n        } catch (error) {\n            console.error(\"Error in getCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCurrentChapter: async (courseId)=>{\n        try {\n            // APIのベースURLを修正\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/current-chapter\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current chapter\");\n            }\n            const data = await response.json();\n            if (!data.success || !data.data) {\n                throw new Error(data.message || \"Invalid response format\");\n            }\n            const currentChapter = data.data;\n            return {\n                success: true,\n                data: {\n                    chapterId: currentChapter.id,\n                    courseId: courseId,\n                    nextUrl: \"/user/courses/\".concat(courseId, \"/chapters/\").concat(currentChapter.id),\n                    chapter: currentChapter\n                }\n            };\n        } catch (error) {\n            console.error(\"Error fetching current chapter:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // コース作成\n    createCourse: async (data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        return {\n            data: result.data\n        };\n    },\n    // コース更新\n    // lib/api/courses.ts\n    updateCourse: async (courseId, data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.message || \"Failed to update course\");\n        }\n        const result = await response.json();\n        return result;\n    },\n    // コース削除\n    deleteCourse: async (courseId)=>{\n        await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        return {\n            success: true\n        };\n    },\n    // 利用可能なコース一覧取得\n    getAvailableCourses: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/available\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch courses\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch courses:\", error);\n            throw error;\n        }\n    },\n    // コース購入\n    purchaseCourse: async (courseId)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/purchase\"), {\n            method: \"POST\",\n            headers: getAuthHeaders()\n        });\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.message || \"Failed to purchase course\");\n        }\n        return {\n            success: true,\n            data: result\n        };\n    },\n    // コース開始\n    startCourse: async (courseId)=>{\n        try {\n            console.log(\"Sending start course request for:\", courseId);\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            const result = await response.json();\n            console.log(\"Start course response:\", result);\n            if (!response.ok) {\n                throw new Error(result.message || \"Failed to start course\");\n            }\n            return {\n                success: true,\n                data: result\n            };\n        } catch (error) {\n            console.error(\"Error in startCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // ユーザーの受講コース一覧取得\n    getUserCourses: async ()=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/users/courses/enrolled\"), {\n            headers: getAuthHeaders()\n        });\n        const data = await response.json();\n        return {\n            success: true,\n            data: data\n        };\n    },\n    // チャプター関連のAPI\n    // src/lib/api/courses.ts の getChapter メソッドを修正\n    getChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                return {\n                    success: false,\n                    data: null,\n                    error: \"Failed to fetch chapter\"\n                };\n            }\n            const responseData = await response.json();\n            return {\n                success: true,\n                data: responseData.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error occurred\"\n            };\n        }\n    },\n    // チャプター完了処理\n    completeChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/complete\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to complete chapter\");\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Failed to complete chapter:\", error);\n            throw error;\n        }\n    },\n    // courses.ts\n    getCurrentUserCourse: async (courseId)=>{\n        try {\n            const endpoint = courseId ? \"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/progress\") : \"\".concat(FRONTEND_API_BASE, \"/courses/user/current\"); // 現在のコースを取得するエンドポイント\n            const response = await fetch(endpoint, {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current course\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch current course:\", error);\n            return {\n                success: false,\n                data: null,\n                message: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    expireArchiveAccess: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/courses/user/\".concat(courseId, \"/expire-archive\"));\n            return response.data;\n        } catch (error) {\n            throw (0,_errorHandler__WEBPACK_IMPORTED_MODULE_1__.handleApiError)(error);\n        }\n    },\n    // src/lib/api/courses.ts に追加\n    startChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to start chapter\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // repurchaseCourse メソッドの追加\n    repurchaseCourse: async (courseId)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/repurchase\"), {\n            method: \"POST\",\n            headers: getAuthHeaders()\n        });\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(result.message || \"Failed to repurchase course\");\n        }\n        return {\n            success: true,\n            data: result\n        };\n    },\n    // チャプター作成\n    createChapter: async (courseId, data)=>{\n        const { waitTime, ...restData } = data;\n        const createData = {\n            ...restData,\n            releaseTime: data.releaseTime || waitTime\n        };\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/admin/courses/\".concat(courseId, \"/chapters\"), createData);\n        return {\n            data: response.data.data\n        };\n    },\n    // チャプター更新\n    updateChapter: async (courseId, chapterId, data)=>{\n        const { waitTime, ...restData } = data;\n        const updatedData = {\n            ...restData,\n            releaseTime: data.releaseTime || waitTime\n        };\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId, \"/chapters/\").concat(chapterId), updatedData);\n        return {\n            data: response.data.data\n        };\n    },\n    // チャプター削除\n    deleteChapter: async (courseId, chapterId)=>{\n        await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].delete(\"/admin/courses/\".concat(courseId, \"/chapters/\").concat(chapterId));\n        return {\n            success: true\n        };\n    },\n    // チャプター順序更新\n    updateChaptersOrder: async (courseId, chapters)=>{\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId, \"/chapters/reorder\"), {\n            chapters\n        });\n        return {\n            data: response.data.data\n        };\n    },\n    // 公開状態管理\n    publishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to publish course:\", error);\n            throw error;\n        }\n    },\n    unpublishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: false\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to unpublish course:\", error);\n            throw error;\n        }\n    },\n    archiveCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isArchived: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to archive course:\", error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXBpL2NvdXJzZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlCO0FBRXVCO0FBNERoRCxlQUFlO0FBQ2YsTUFBTUUsb0JBQW9CQywyQkFBK0IsSUFBSTtBQUU3RCxNQUFNRyxpQkFBaUI7SUFDckIsTUFBTUMsUUFBUUMsYUFBYUMsT0FBTyxDQUFDO0lBQ25DLE9BQU87UUFDTCxnQkFBZ0I7UUFDaEIsaUJBQWlCRixRQUFRLFVBQWdCLE9BQU5BLFNBQVU7SUFDL0M7QUFDRjtBQUdPLE1BQU1HLFlBQVk7SUFDdkIsVUFBVTtJQUNWQyxXQUFXLE9BQU9DO1FBQ2hCLElBQUk7WUFDRixNQUFNQyxXQUFXLE1BQU1DLE1BQ3JCLEdBQXNDRixPQUFuQ1YsbUJBQWtCLG1CQUEwQixPQUFUVSxXQUN0QztnQkFDRUcsU0FBU1Q7WUFDWDtZQUdGLElBQUksQ0FBQ08sU0FBU0csRUFBRSxFQUFFO2dCQUNoQixNQUFNLElBQUlDLE1BQU0sMkJBQStDLE9BQXBCSixTQUFTSyxVQUFVO1lBQ2hFO1lBRUEsTUFBTUMsT0FBTyxNQUFNTixTQUFTTyxJQUFJO1lBQ2hDLE9BQU9ELE1BQU0sZ0JBQWdCO1FBQy9CLEVBQUUsT0FBT0UsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsdUJBQXVCQTtZQUNyQyxPQUFPO2dCQUNMRSxTQUFTO2dCQUNUSixNQUFNO2dCQUNORSxPQUFPQSxpQkFBaUJKLFFBQVFJLE1BQU1HLE9BQU8sR0FBRztZQUNsRDtRQUNGO0lBQ0Y7SUFFQWIsV0FBVyxPQUFPQztRQUNoQixJQUFJO1lBQ0ZVLFFBQVFHLEdBQUcsQ0FBQyw0QkFBNEJiO1lBQ3hDLE1BQU1DLFdBQVcsTUFBTUMsTUFDckIsR0FBc0NGLE9BQW5DVixtQkFBa0IsbUJBQTBCLE9BQVRVLFdBQ3RDO2dCQUNFRyxTQUFTVDtZQUNYO1lBR0YsSUFBSSxDQUFDTyxTQUFTRyxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSwyQkFBK0Ms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QUU4QixhQUFhO1lBQU07WUFFdkIsT0FBTztnQkFDTG5CLFNBQVM7Z0JBQ1RKLE1BQU1OLFNBQVNNLElBQUksQ0FBQ0EsSUFBSTtZQUMxQjtRQUNGLEVBQUUsT0FBT0UsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtZQUM3QyxNQUFNQTtRQUNSO0lBQ0Y7SUFFQXFFLGVBQWUsT0FBTzlFO1FBQ3BCLElBQUk7WUFDRixNQUFNQyxXQUFXLE1BQU1iLDZDQUFHQSxDQUFDb0YsR0FBRyxDQUM1QixrQkFBMkIsT0FBVHhFLFdBQ2xCO2dCQUFFK0IsWUFBWTtZQUFLO1lBRXJCLE9BQU87Z0JBQ0xwQixTQUFTO2dCQUNUSixNQUFNTixTQUFTTSxJQUFJLENBQUNBLElBQUk7WUFDMUI7UUFDRixFQUFFLE9BQU9FLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDZCQUE2QkE7WUFDM0MsTUFBTUE7UUFDUjtJQUNGO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL2FwaS9jb3Vyc2VzLnRzPzdjNWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tICcuL2F1dGgnO1xuaW1wb3J0IHsgQVBJUmVzcG9uc2UgfSBmcm9tICdAL3R5cGVzL2FwaSc7XG5pbXBvcnQgeyBoYW5kbGVBcGlFcnJvciB9IGZyb20gJy4vZXJyb3JIYW5kbGVyJztcblxuaW1wb3J0IHsgXG4gIENvdXJzZSwgXG4gIENoYXB0ZXIsXG4gIENyZWF0ZUNvdXJzZURUTywgXG4gIFVwZGF0ZUNvdXJzZURUTywgXG4gIENyZWF0ZUNoYXB0ZXJEVE8sXG4gIENvdXJzZVN0YXR1cyxcbn0gZnJvbSAnQC90eXBlcy9jb3Vyc2UnO1xuXG4vLyDjgqTjg7Pjgr/jg7zjg5Xjgqfjg7zjgrnlrprnvqlcbmludGVyZmFjZSBCYXNlUmVzcG9uc2Uge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBtZXNzYWdlPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ291cnNlUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICBkYXRhOiBDb3Vyc2U7XG59XG5cbmludGVyZmFjZSBDb3Vyc2VMaXN0UmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICBkYXRhOiAoQ291cnNlICYge1xuICAgIHN0YXR1czogQ291cnNlU3RhdHVzO1xuICAgIGNoYXB0ZXJzPzogQ2hhcHRlcltdO1xuICB9KVtdO1xufVxuXG5pbnRlcmZhY2UgQ2hhcHRlclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgZGF0YTogQ2hhcHRlcjtcbn1cblxuaW50ZXJmYWNlIFVzZXJDb3Vyc2Uge1xuICBpZDogc3RyaW5nO1xuICBjb3Vyc2VJZDogc3RyaW5nO1xuICBwcm9ncmVzczogbnVtYmVyO1xuICBzdGFydGVkQXQ6IERhdGU7XG4gIGNvbXBsZXRlZEF0PzogRGF0ZTtcbn1cblxuaW50ZXJmYWNlIFB1cmNoYXNlUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICBkYXRhOiB7XG4gICAgdXNlckNvdXJzZTogVXNlckNvdXJzZTtcbiAgfTtcbn1cblxuaW50ZXJmYWNlIEN1cnJlbnRDb3Vyc2VSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gIGRhdGE6IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGNvdXJzZUlkOiBzdHJpbmc7XG4gICAgY2hhcHRlcnM6IHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICBvcmRlckluZGV4OiBudW1iZXI7XG4gICAgICB0aXRsZTogc3RyaW5nO1xuICAgIH1bXTtcbiAgICBwcm9ncmVzczogbnVtYmVyO1xuICAgIHN0YXJ0ZWRBdDogRGF0ZTtcbiAgfTtcbn1cblxuLy8g5a6a5pWw44Go44Om44O844OG44Kj44Oq44OG44Kj6Zai5pWwXG5jb25zdCBGUk9OVEVORF9BUElfQkFTRSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGknO1xuXG5jb25zdCBnZXRBdXRoSGVhZGVycyA9ICgpID0+IHtcbiAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXV0aF90b2tlbicpO1xuICByZXR1cm4ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlbiA/IGBCZWFyZXIgJHt0b2tlbn1gIDogJycsXG4gIH07XG59O1xuXG5cbmV4cG9ydCBjb25zdCBjb3Vyc2VBcGkgPSB7XG4gIC8vIOOCs+ODvOOCueS4gOimp+WPluW+l1xuICBnZXRDb3Vyc2U6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxBUElSZXNwb25zZTxDb3Vyc2U+PiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9YCxcbiAgICAgICAge1xuICAgICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICAgIH1cbiAgICAgICk7XG4gIFxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBjb3Vyc2U6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGE7IC8vIOODrOOCueODneODs+OCueOCkuOBneOBruOBvuOBvui/lOOBm+OCi1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBnZXRDb3Vyc2U6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICBnZXRDb3Vyc2U6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxBUElSZXNwb25zZTxDb3Vyc2U+PiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBjb3Vyc2Ugd2l0aCBJRDonLCBjb3Vyc2VJZCk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vYWRtaW4vY291cnNlcy8ke2NvdXJzZUlkfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgICB9XG4gICAgICApO1xuICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggY291cnNlOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICB9XG4gIFxuICAgICAgY29uc3QgcmF3RGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKCdSYXcgcmVzcG9uc2U6JywgcmF3RGF0YSk7XG4gIFxuICAgICAgLy8g5pel5LuY5paH5a2X5YiX44KSRGF0ZeWei+OBq+WkieaPm+OBmeOCi+mWouaVsFxuICAgICAgY29uc3QgcGFyc2VEYXRlID0gKGRhdGVTdHI6IHN0cmluZyB8IG51bGwpID0+IGRhdGVTdHIgPyBuZXcgRGF0ZShkYXRlU3RyKSA6IHVuZGVmaW5lZDtcbiAgXG4gICAgICAvLyDjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr/jgpJDb3Vyc2XlnovjgavlpInmj5tcbiAgICAgIGNvbnN0IGNvdXJzZURhdGE6IENvdXJzZSA9IHtcbiAgICAgICAgaWQ6IHJhd0RhdGEuaWQsXG4gICAgICAgIHRpdGxlOiByYXdEYXRhLnRpdGxlLFxuICAgICAgICBkZXNjcmlwdGlvbjogcmF3RGF0YS5kZXNjcmlwdGlvbixcbiAgICAgICAgdGh1bWJuYWlsOiByYXdEYXRhLnRodW1ibmFpbCxcbiAgICAgICAgZ2VtQ29zdDogcmF3RGF0YS5nZW1Db3N0IHx8IDAsXG4gICAgICAgIGxldmVsUmVxdWlyZWQ6IHJhd0RhdGEubGV2ZWxSZXF1aXJlZCB8fCAwLFxuICAgICAgICByYW5rUmVxdWlyZWQ6IHJhd0RhdGEucmFua1JlcXVpcmVkIHx8ICcnLFxuICAgICAgICB0aW1lTGltaXQ6IHJhd0RhdGEudGltZUxpbWl0IHx8IDAsXG4gICAgICAgIHBhc3NpbmdTY29yZTogcmF3RGF0YS5wYXNzaW5nU2NvcmUgfHwgNzAsXG4gICAgICAgIGV4Y2VsbGVudFNjb3JlOiByYXdEYXRhLmV4Y2VsbGVudFNjb3JlIHx8IDk1LFxuICAgICAgICBpc1B1Ymxpc2hlZDogcmF3RGF0YS5pc1B1Ymxpc2hlZCB8fCBmYWxzZSxcbiAgICAgICAgaXNBcmNoaXZlZDogcmF3RGF0YS5pc0FyY2hpdmVkIHx8IGZhbHNlLFxuICAgICAgICBwdWJsaXNoZWRBdDogcGFyc2VEYXRlKHJhd0RhdGEucHVibGlzaGVkQXQpLFxuICAgICAgICBhcmNoaXZlZEF0OiBwYXJzZURhdGUocmF3RGF0YS5hcmNoaXZlZEF0KSxcbiAgICAgICAgY3JlYXRlZEF0OiBwYXJzZURhdGUocmF3RGF0YS5jcmVhdGVkQXQpIHx8IG5ldyBEYXRlKCksXG4gICAgICAgIHVwZGF0ZWRBdDogcGFyc2VEYXRlKHJhd0RhdGEudXBkYXRlZEF0KSB8fCBuZXcgRGF0ZSgpLFxuICAgICAgICBjaGFwdGVyczogcmF3RGF0YS5jaGFwdGVycyB8fCBbXSxcbiAgICAgICAgc3RhdHVzOiAnYXZhaWxhYmxlJyBhcyBDb3Vyc2VTdGF0dXMsICAvLyDjg4fjg5Xjgqnjg6vjg4jjga7jgrnjg4bjg7zjgr/jgrlcbiAgICAgIH07XG4gIFxuICAgICAgY29uc29sZS5sb2coJ1RyYW5zZm9ybWVkIGNvdXJzZSBkYXRhOicsIGNvdXJzZURhdGEpO1xuICBcbiAgICAgIC8vIEFQSVJlc3BvbnNl5b2i5byP44Gn6L+U44GZXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBjb3Vyc2VEYXRhXG4gICAgICB9O1xuICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gZ2V0Q291cnNlOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0Q3VycmVudENoYXB0ZXI6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxBUElSZXNwb25zZTx7XG4gIGNoYXB0ZXJJZDogc3RyaW5nO1xuICBjb3Vyc2VJZDogc3RyaW5nO1xuICBuZXh0VXJsOiBzdHJpbmc7XG4gIGNoYXB0ZXI6IENoYXB0ZXI7XG59Pj4gPT4ge1xuICB0cnkge1xuICAgIC8vIEFQSeOBruODmeODvOOCuVVSTOOCkuS/ruato1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vY291cnNlcy91c2VyLyR7Y291cnNlSWR9L2N1cnJlbnQtY2hhcHRlcmAsXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZSdcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggY3VycmVudCBjaGFwdGVyJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBpZiAoIWRhdGEuc3VjY2VzcyB8fCAhZGF0YS5kYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5tZXNzYWdlIHx8ICdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRDaGFwdGVyID0gZGF0YS5kYXRhO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBjaGFwdGVySWQ6IGN1cnJlbnRDaGFwdGVyLmlkLFxuICAgICAgICBjb3Vyc2VJZDogY291cnNlSWQsXG4gICAgICAgIG5leHRVcmw6IGAvdXNlci9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y3VycmVudENoYXB0ZXIuaWR9YCxcbiAgICAgICAgY2hhcHRlcjogY3VycmVudENoYXB0ZXJcbiAgICAgIH1cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGN1cnJlbnQgY2hhcHRlcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgXG4gICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgfTtcbiAgfVxufSxcblxuICAvLyDjgrPjg7zjgrnkvZzmiJBcbiAgY3JlYXRlQ291cnNlOiBhc3luYyAoZGF0YTogQ3JlYXRlQ291cnNlRFRPKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9hZG1pbi9jb3Vyc2VzYCxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdC5kYXRhIH07XG4gIH0sXG5cbiAgLy8g44Kz44O844K55pu05pawXG4vLyBsaWIvYXBpL2NvdXJzZXMudHNcbnVwZGF0ZUNvdXJzZTogYXN5bmMgKGNvdXJzZUlkOiBzdHJpbmcsIGRhdGE6IFVwZGF0ZUNvdXJzZURUTykgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9YCxcbiAgICB7XG4gICAgICBtZXRob2Q6ICdQVVQnLCAvLyBQQVRDSOOBi+OCiVBVVOOBq+WkieabtFxuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH1cbiAgKTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyb3IgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgY291cnNlJyk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAvLyDjgrPjg7zjgrnliYrpmaRcbiAgZGVsZXRlQ291cnNlOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IGZldGNoKFxuICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH1gLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICB9LFxuXG4gIC8vIOWIqeeUqOWPr+iDveOBquOCs+ODvOOCueS4gOimp+WPluW+l1xuICBnZXRBdmFpbGFibGVDb3Vyc2VzOiBhc3luYyAoKTogUHJvbWlzZTxDb3Vyc2VMaXN0UmVzcG9uc2U+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2NvdXJzZXMvdXNlci9hdmFpbGFibGVgLFxuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBjb3Vyc2VzJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4geyBcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIGNvdXJzZXM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuXG4gIC8vIOOCs+ODvOOCueizvOWFpVxuICBwdXJjaGFzZUNvdXJzZTogYXN5bmMgKGNvdXJzZUlkOiBzdHJpbmcpOiBQcm9taXNlPFB1cmNoYXNlUmVzcG9uc2U+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7RlJPTlRFTkRfQVBJX0JBU0V9L2NvdXJzZXMvdXNlci8ke2NvdXJzZUlkfS9wdXJjaGFzZWAsIFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIH1cbiAgICApO1xuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0Lm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBwdXJjaGFzZSBjb3Vyc2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgXG4gICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgIGRhdGE6IHJlc3VsdCBcbiAgICB9O1xuICB9LFxuXG4gIC8vIOOCs+ODvOOCuemWi+Wni1xuICBzdGFydENvdXJzZTogYXN5bmMgKGNvdXJzZUlkOiBzdHJpbmcpOiBQcm9taXNlPEFQSVJlc3BvbnNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YTogYW55IH0+PiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdTZW5kaW5nIHN0YXJ0IGNvdXJzZSByZXF1ZXN0IGZvcjonLCBjb3Vyc2VJZCk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vY291cnNlcy91c2VyLyR7Y291cnNlSWR9L3N0YXJ0YCxcbiAgICAgICAge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJ1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZygnU3RhcnQgY291cnNlIHJlc3BvbnNlOicsIHJlc3VsdCk7XG4gIFxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0Lm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzdGFydCBjb3Vyc2UnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IFxuICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgZGF0YTogcmVzdWx0IFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gc3RhcnRDb3Vyc2U6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIC8vIOODpuODvOOCtuODvOOBruWPl+ism+OCs+ODvOOCueS4gOimp+WPluW+l1xuICBnZXRVc2VyQ291cnNlczogYXN5bmMgKCk6IFByb21pc2U8Q291cnNlTGlzdFJlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS91c2Vycy9jb3Vyc2VzL2Vucm9sbGVkYCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogZGF0YSB9O1xuICB9LFxuXG5cbiAgLy8g44OB44Oj44OX44K/44O86Zai6YCj44GuQVBJXG4gIC8vIHNyYy9saWIvYXBpL2NvdXJzZXMudHMg44GuIGdldENoYXB0ZXIg44Oh44K944OD44OJ44KS5L+u5q2jXG5nZXRDaGFwdGVyOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZywgY2hhcHRlcklkOiBzdHJpbmcpOiBQcm9taXNlPEFQSVJlc3BvbnNlPENoYXB0ZXI+PiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGAke0ZST05URU5EX0FQSV9CQVNFfS9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y2hhcHRlcklkfWAsXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICB9XG4gICAgKTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHJldHVybiB7IFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIGNoYXB0ZXInXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4geyBcbiAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLmRhdGEgXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yIG9jY3VycmVkJ1xuICAgIH07XG4gIH1cbn0sXG5cbiAgLy8g44OB44Oj44OX44K/44O85a6M5LqG5Yem55CGXG4gIGNvbXBsZXRlQ2hhcHRlcjogYXN5bmMgKGNvdXJzZUlkOiBzdHJpbmcsIGNoYXB0ZXJJZDogc3RyaW5nKTogUHJvbWlzZTxBUElSZXNwb25zZTx7IG5leHRDaGFwdGVyOiBDaGFwdGVyIHwgbnVsbCB9Pj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vY291cnNlcy8ke2NvdXJzZUlkfS9jaGFwdGVycy8ke2NoYXB0ZXJJZH0vY29tcGxldGVgLFxuICAgICAgICB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjb21wbGV0ZSBjaGFwdGVyJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNvbXBsZXRlIGNoYXB0ZXI6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuXG4gLy8gY291cnNlcy50c1xuZ2V0Q3VycmVudFVzZXJDb3Vyc2U6IGFzeW5jIChjb3Vyc2VJZD86IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gY291cnNlSWQgXG4gICAgICA/IGAke0ZST05URU5EX0FQSV9CQVNFfS9jb3Vyc2VzL3VzZXIvJHtjb3Vyc2VJZH0vcHJvZ3Jlc3NgXG4gICAgICA6IGAke0ZST05URU5EX0FQSV9CQVNFfS9jb3Vyc2VzL3VzZXIvY3VycmVudGA7ICAvLyDnj77lnKjjga7jgrPjg7zjgrnjgpLlj5blvpfjgZnjgovjgqjjg7Pjg4njg53jgqTjg7Pjg4hcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBlbmRwb2ludCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggY3VycmVudCBjb3Vyc2UnKTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogZGF0YS5kYXRhXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggY3VycmVudCBjb3Vyc2U6JywgZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBtZXNzYWdlOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgIH07XG4gIH1cbn0sXG5cbmV4cGlyZUFyY2hpdmVBY2Nlc3M6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdChgL2NvdXJzZXMvdXNlci8ke2NvdXJzZUlkfS9leHBpcmUtYXJjaGl2ZWApO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IGhhbmRsZUFwaUVycm9yKGVycm9yKTtcbiAgfVxufSxcbi8vIHNyYy9saWIvYXBpL2NvdXJzZXMudHMg44Gr6L+95YqgXG5zdGFydENoYXB0ZXI6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nLCBjaGFwdGVySWQ6IHN0cmluZyk6IFByb21pc2U8QVBJUmVzcG9uc2U8YW55Pj4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vY291cnNlcy8ke2NvdXJzZUlkfS9jaGFwdGVycy8ke2NoYXB0ZXJJZH0vc3RhcnRgLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc3RhcnQgY2hhcHRlcicpO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBkYXRhLmRhdGFcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICB9O1xuICB9XG59LFxuXG4vLyByZXB1cmNoYXNlQ291cnNlIOODoeOCveODg+ODieOBrui/veWKoFxucmVwdXJjaGFzZUNvdXJzZTogYXN5bmMgKGNvdXJzZUlkOiBzdHJpbmcpOiBQcm9taXNlPFB1cmNoYXNlUmVzcG9uc2U+ID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICBgJHtGUk9OVEVORF9BUElfQkFTRX0vY291cnNlcy91c2VyLyR7Y291cnNlSWR9L3JlcHVyY2hhc2VgLFxuICAgIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICB9XG4gICk7XG4gIFxuICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0Lm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byByZXB1cmNoYXNlIGNvdXJzZScpO1xuICB9XG4gIHJldHVybiB7IFxuICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgIGRhdGE6IHJlc3VsdCBcbiAgfTtcbn0sXG4gIC8vIOODgeODo+ODl+OCv+ODvOS9nOaIkFxuICBjcmVhdGVDaGFwdGVyOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZywgZGF0YTogQ3JlYXRlQ2hhcHRlckRUTykgPT4ge1xuICAgIGNvbnN0IHsgd2FpdFRpbWUsIC4uLnJlc3REYXRhIH0gPSBkYXRhO1xuICAgIGNvbnN0IGNyZWF0ZURhdGEgPSB7XG4gICAgICAuLi5yZXN0RGF0YSxcbiAgICAgIHJlbGVhc2VUaW1lOiBkYXRhLnJlbGVhc2VUaW1lIHx8IHdhaXRUaW1lXG4gICAgfTtcbiAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdDxDaGFwdGVyUmVzcG9uc2U+KFxuICAgICAgYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzYCxcbiAgICAgIGNyZWF0ZURhdGFcbiAgICApO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3BvbnNlLmRhdGEuZGF0YSB9O1xuICB9LFxuXG4gIC8vIOODgeODo+ODl+OCv+ODvOabtOaWsFxuICB1cGRhdGVDaGFwdGVyOiBhc3luYyAoXG4gICAgY291cnNlSWQ6IHN0cmluZywgXG4gICAgY2hhcHRlcklkOiBzdHJpbmcsIFxuICAgIGRhdGE6IE9taXQ8UGFydGlhbDxDaGFwdGVyPiwgJ2lkJyB8ICdjb3Vyc2VJZCc+XG4gICkgPT4ge1xuICAgIGNvbnN0IHsgd2FpdFRpbWUsIC4uLnJlc3REYXRhIH0gPSBkYXRhO1xuICAgIGNvbnN0IHVwZGF0ZWREYXRhID0ge1xuICAgICAgLi4ucmVzdERhdGEsXG4gICAgICByZWxlYXNlVGltZTogZGF0YS5yZWxlYXNlVGltZSB8fCB3YWl0VGltZVxuICAgIH07XG4gIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnB1dDxDaGFwdGVyUmVzcG9uc2U+KFxuICAgICAgYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y2hhcHRlcklkfWAsXG4gICAgICB1cGRhdGVkRGF0YVxuICAgICk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzcG9uc2UuZGF0YS5kYXRhIH07XG4gIH0sXG5cbiAgLy8g44OB44Oj44OX44K/44O85YmK6ZmkXG4gIGRlbGV0ZUNoYXB0ZXI6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nLCBjaGFwdGVySWQ6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IGFwaS5kZWxldGUoYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzLyR7Y2hhcHRlcklkfWApO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgfSxcblxuICAvLyDjg4Hjg6Pjg5fjgr/jg7zpoIbluo/mm7TmlrBcbiAgdXBkYXRlQ2hhcHRlcnNPcmRlcjogYXN5bmMgKFxuICAgIGNvdXJzZUlkOiBzdHJpbmcsIFxuICAgIGNoYXB0ZXJzOiBBcnJheTx7IGlkOiBzdHJpbmc7IG9yZGVySW5kZXg6IG51bWJlciB9PlxuICApID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQ8Q291cnNlUmVzcG9uc2U+KFxuICAgICAgYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9L2NoYXB0ZXJzL3Jlb3JkZXJgLFxuICAgICAgeyBjaGFwdGVycyB9XG4gICAgKTtcbiAgICByZXR1cm4geyBkYXRhOiByZXNwb25zZS5kYXRhLmRhdGEgfTtcbiAgfSxcbiAgLy8g5YWs6ZaL54q25oWL566h55CGXG4gIHB1Ymxpc2hDb3Vyc2U6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxDb3Vyc2VSZXNwb25zZT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQ8Q291cnNlUmVzcG9uc2U+KFxuICAgICAgICBgL2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH1gLFxuICAgICAgICB7IGlzUHVibGlzaGVkOiB0cnVlIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiByZXNwb25zZS5kYXRhLmRhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwdWJsaXNoIGNvdXJzZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAgdW5wdWJsaXNoQ291cnNlOiBhc3luYyAoY291cnNlSWQ6IHN0cmluZyk6IFByb21pc2U8Q291cnNlUmVzcG9uc2U+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucHV0PENvdXJzZVJlc3BvbnNlPihcbiAgICAgICAgYC9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9YCxcbiAgICAgICAgeyBpc1B1Ymxpc2hlZDogZmFsc2UgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEuZGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHVucHVibGlzaCBjb3Vyc2U6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuXG4gIGFyY2hpdmVDb3Vyc2U6IGFzeW5jIChjb3Vyc2VJZDogc3RyaW5nKTogUHJvbWlzZTxDb3Vyc2VSZXNwb25zZT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQ8Q291cnNlUmVzcG9uc2U+KFxuICAgICAgICBgL2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH1gLFxuICAgICAgICB7IGlzQXJjaGl2ZWQ6IHRydWUgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEuZGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGFyY2hpdmUgY291cnNlOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTsiXSwibmFtZXMiOlsiYXBpIiwiaGFuZGxlQXBpRXJyb3IiLCJGUk9OVEVORF9BUElfQkFTRSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwiZ2V0QXV0aEhlYWRlcnMiLCJ0b2tlbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjb3Vyc2VBcGkiLCJnZXRDb3Vyc2UiLCJjb3Vyc2VJZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJkYXRhIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwibG9nIiwicmF3RGF0YSIsInBhcnNlRGF0ZSIsImRhdGVTdHIiLCJEYXRlIiwidW5kZWZpbmVkIiwiY291cnNlRGF0YSIsImlkIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInRodW1ibmFpbCIsImdlbUNvc3QiLCJsZXZlbFJlcXVpcmVkIiwicmFua1JlcXVpcmVkIiwidGltZUxpbWl0IiwicGFzc2luZ1Njb3JlIiwiZXhjZWxsZW50U2NvcmUiLCJpc1B1Ymxpc2hlZCIsImlzQXJjaGl2ZWQiLCJwdWJsaXNoZWRBdCIsImFyY2hpdmVkQXQiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJjaGFwdGVycyIsInN0YXR1cyIsImdldEN1cnJlbnRDaGFwdGVyIiwiY3JlZGVudGlhbHMiLCJjdXJyZW50Q2hhcHRlciIsImNoYXB0ZXJJZCIsIm5leHRVcmwiLCJjaGFwdGVyIiwiY3JlYXRlQ291cnNlIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJ1cGRhdGVDb3Vyc2UiLCJkZWxldGVDb3Vyc2UiLCJnZXRBdmFpbGFibGVDb3Vyc2VzIiwicHVyY2hhc2VDb3Vyc2UiLCJzdGFydENvdXJzZSIsImdldFVzZXJDb3Vyc2VzIiwiZ2V0Q2hhcHRlciIsInJlc3BvbnNlRGF0YSIsImNvbXBsZXRlQ2hhcHRlciIsImdldEN1cnJlbnRVc2VyQ291cnNlIiwiZW5kcG9pbnQiLCJleHBpcmVBcmNoaXZlQWNjZXNzIiwicG9zdCIsInN0YXJ0Q2hhcHRlciIsInJlcHVyY2hhc2VDb3Vyc2UiLCJjcmVhdGVDaGFwdGVyIiwid2FpdFRpbWUiLCJyZXN0RGF0YSIsImNyZWF0ZURhdGEiLCJyZWxlYXNlVGltZSIsInVwZGF0ZUNoYXB0ZXIiLCJ1cGRhdGVkRGF0YSIsInB1dCIsImRlbGV0ZUNoYXB0ZXIiLCJkZWxldGUiLCJ1cGRhdGVDaGFwdGVyc09yZGVyIiwicHVibGlzaENvdXJzZSIsInVucHVibGlzaENvdXJzZSIsImFyY2hpdmVDb3Vyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/courses.ts\n"));

/***/ })

});