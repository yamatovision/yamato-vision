"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/courses/new/page",{

/***/ "(app-pages-browser)/./src/lib/api/cloudinaryUpload.ts":
/*!*****************************************!*\
  !*** ./src/lib/api/cloudinaryUpload.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uploadToCloudinary: function() { return /* binding */ uploadToCloudinary; }\n/* harmony export */ });\nasync function uploadToCloudinary(file) {\n    let folder = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"courses\", onProgress = arguments.length > 2 ? arguments[2] : void 0;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const uploadPreset = \"yamato_vision\" || 0;\n    const cloudName = \"dr9g8wsag\" || 0;\n    console.log(\"Upload preset:\", uploadPreset); // 追加\n    console.log(\"Cloud name:\", cloudName); // 追加\n    formData.append(\"upload_preset\", uploadPreset);\n    formData.append(\"folder\", folder);\n    const url = \"https://api.cloudinary.com/v1_1/\".concat(cloudName, \"/auto/upload\");\n    console.log(\"Upload URL:\", url); // 追加\n    try {\n        const response = await fetch(url, {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            var _errorData_error;\n            const errorData = await response.json();\n            console.error(\"Cloudinary error:\", errorData); // 追加\n            throw new Error(\"Failed to upload file to Cloudinary: \".concat(((_errorData_error = errorData.error) === null || _errorData_error === void 0 ? void 0 : _errorData_error.message) || \"Unknown error\"));\n        }\n        const data = await response.json();\n        return data.secure_url;\n    } catch (error) {\n        console.error(\"Upload error details:\", error); // 追加\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXBpL2Nsb3VkaW5hcnlVcGxvYWQudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLGVBQWVBLG1CQUNwQkMsSUFBVTtRQUNWQyxTQUFBQSxpRUFBaUIsV0FDakJDO0lBRUEsTUFBTUMsV0FBVyxJQUFJQztJQUNyQkQsU0FBU0UsTUFBTSxDQUFDLFFBQVFMO0lBRXhCLE1BQU1NLGVBQWVDLGVBQWdELElBQUk7SUFDekUsTUFBTUcsWUFBWUgsV0FBNkMsSUFBSTtJQUVuRUssUUFBUUMsR0FBRyxDQUFDLGtCQUFrQlAsZUFBZSxLQUFLO0lBQ2xETSxRQUFRQyxHQUFHLENBQUMsZUFBZUgsWUFBWSxLQUFLO0lBRTVDUCxTQUFTRSxNQUFNLENBQUMsaUJBQWlCQztJQUNqQ0gsU0FBU0UsTUFBTSxDQUFDLFVBQVVKO0lBRTFCLE1BQU1hLE1BQU0sbUNBQTZDLE9BQVZKLFdBQVU7SUFDekRFLFFBQVFDLEdBQUcsQ0FBQyxlQUFlQyxNQUFNLEtBQUs7SUFFdEMsSUFBSTtRQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTUYsS0FBSztZQUNoQ0csUUFBUTtZQUNSQyxNQUFNZjtRQUNSO1FBRUEsSUFBSSxDQUFDWSxTQUFTSSxFQUFFLEVBQUU7Z0JBR3dDQztZQUZ4RCxNQUFNQSxZQUFZLE1BQU1MLFNBQVNNLElBQUk7WUFDckNULFFBQVFVLEtBQUssQ0FBQyxxQkFBcUJGLFlBQVksS0FBSztZQUNwRCxNQUFNLElBQUlHLE1BQU0sd0NBQW9GLE9BQTVDSCxFQUFBQSxtQkFBQUEsVUFBVUUsS0FBSyxjQUFmRix1Q0FBQUEsaUJBQWlCSSxPQUFPLEtBQUk7UUFDdEY7UUFFQSxNQUFNQyxPQUFPLE1BQU1WLFNBQVNNLElBQUk7UUFDaEMsT0FBT0ksS0FBS0MsVUFBVTtJQUN4QixFQUFFLE9BQU9KLE9BQU87UUFDZFYsUUFBUVUsS0FBSyxDQUFDLHlCQUF5QkEsUUFBUSxLQUFLO1FBQ3BELE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL2FwaS9jbG91ZGluYXJ5VXBsb2FkLnRzP2QzMzAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZFRvQ2xvdWRpbmFyeShcbiAgZmlsZTogRmlsZSwgXG4gIGZvbGRlcjogc3RyaW5nID0gJ2NvdXJzZXMnLFxuICBvblByb2dyZXNzPzogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWRcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuICBcbiAgY29uc3QgdXBsb2FkUHJlc2V0ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xPVURJTkFSWV9VUExPQURfUFJFU0VUIHx8ICcnO1xuICBjb25zdCBjbG91ZE5hbWUgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTE9VRElOQVJZX0NMT1VEX05BTUUgfHwgJyc7XG4gIFxuICBjb25zb2xlLmxvZygnVXBsb2FkIHByZXNldDonLCB1cGxvYWRQcmVzZXQpOyAvLyDov73liqBcbiAgY29uc29sZS5sb2coJ0Nsb3VkIG5hbWU6JywgY2xvdWROYW1lKTsgLy8g6L+95YqgXG4gIFxuICBmb3JtRGF0YS5hcHBlbmQoJ3VwbG9hZF9wcmVzZXQnLCB1cGxvYWRQcmVzZXQpO1xuICBmb3JtRGF0YS5hcHBlbmQoJ2ZvbGRlcicsIGZvbGRlcik7XG5cbiAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmNsb3VkaW5hcnkuY29tL3YxXzEvJHtjbG91ZE5hbWV9L2F1dG8vdXBsb2FkYDtcbiAgY29uc29sZS5sb2coJ1VwbG9hZCBVUkw6JywgdXJsKTsgLy8g6L+95YqgXG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICB9KTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Nsb3VkaW5hcnkgZXJyb3I6JywgZXJyb3JEYXRhKTsgLy8g6L+95YqgXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB1cGxvYWQgZmlsZSB0byBDbG91ZGluYXJ5OiAke2Vycm9yRGF0YS5lcnJvcj8ubWVzc2FnZSB8fCAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4gZGF0YS5zZWN1cmVfdXJsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1VwbG9hZCBlcnJvciBkZXRhaWxzOicsIGVycm9yKTsgLy8g6L+95YqgXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0iXSwibmFtZXMiOlsidXBsb2FkVG9DbG91ZGluYXJ5IiwiZmlsZSIsImZvbGRlciIsIm9uUHJvZ3Jlc3MiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidXBsb2FkUHJlc2V0IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0NMT1VESU5BUllfVVBMT0FEX1BSRVNFVCIsImNsb3VkTmFtZSIsIk5FWFRfUFVCTElDX0NMT1VESU5BUllfQ0xPVURfTkFNRSIsImNvbnNvbGUiLCJsb2ciLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsIm9rIiwiZXJyb3JEYXRhIiwianNvbiIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiZGF0YSIsInNlY3VyZV91cmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/cloudinaryUpload.ts\n"));

/***/ })

});