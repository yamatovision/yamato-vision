"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/courses/page",{

/***/ "(app-pages-browser)/./src/lib/api/courses.ts":
/*!********************************!*\
  !*** ./src/lib/api/courses.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   courseApi: function() { return /* binding */ courseApi; }\n/* harmony export */ });\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */ \"(app-pages-browser)/./src/lib/api/auth.ts\");\n\n// 定数とユーティリティ関数\nconst FRONTEND_API_BASE = \"http://localhost:3001/api\" || 0;\nconst getAuthHeaders = ()=>{\n    const token = localStorage.getItem(\"auth_token\");\n    return {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token ? \"Bearer \".concat(token) : \"\"\n    };\n};\nconst courseApi = {\n    // コース一覧取得\n    saveMediaProgress: async (data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/media/progress\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\",\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to save media progress\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"Error saving media progress:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    activateCourse: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/activate\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to activate course\");\n            }\n            return {\n                success: true,\n                data: null\n            }; // data: null を追加\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    selectCourse: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/select\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to select course\");\n            }\n            return {\n                success: true,\n                data: null\n            }; // data: null を追加\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    formatCourse: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/format\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to format course\");\n            }\n            return {\n                success: true,\n                data: null\n            }; // data: null を追加\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // メディア進捗の取得\n    getMediaProgress: async (chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/media/progress/\").concat(chapterId), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to get media progress\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"Error getting media progress:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    startExam: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/exam/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to start exam\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    submitExamSection: async (courseId, chapterId, sectionNumber, content)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/exam/sections/\").concat(sectionNumber, \"/submit\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\",\n                body: JSON.stringify({\n                    content\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to submit exam section\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // 最終試験チャプター作成\n    createExamChapter: async (courseId, data)=>{\n        try {\n            console.log(\"createExamChapter - リクエスト情報:\", {\n                URL: \"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/exam-chapters\"),\n                メソッド: \"POST\",\n                ヘッダー: getAuthHeaders(),\n                送信データ: data\n            });\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/exam-chapters\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(data)\n            });\n            console.log(\"createExamChapter - レスポンス情報:\", {\n                ステータス: response.status,\n                ステータスText: response.statusText,\n                OK: response.ok // \"?\" を削除\n            });\n            if (!response.ok) {\n                var _errorData;\n                // エラーレスポンスの詳細を取得\n                const errorData = await response.json().catch(()=>null);\n                console.error(\"サーバーエラーの詳細:\", errorData);\n                throw new Error(((_errorData = errorData) === null || _errorData === void 0 ? void 0 : _errorData.message) || \"Failed to create exam chapter\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"createExamChapter - エラー詳細:\", {\n                エラー: error,\n                メッセージ: error instanceof Error ? error.message : \"Unknown error\",\n                スタック: error instanceof Error ? error.stack : null\n            });\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // 最終試験チャプター更新\n    updateExamChapter: async (courseId, chapterId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/exam-chapters/\").concat(chapterId), {\n                method: \"PUT\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update exam chapter\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // 試験結果取得\n    getExamResult: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/exam/result\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to get exam result\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // frontend/src/lib/api/courses.ts のgetExamCertificateを修正\n    getExamCertificate: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/exam/certificate\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to get certificate data\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getExamProgress: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/exam/progress\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch exam progress\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // チャプター進捗の更新（95%以上視聴時）\n    updateChapterProgress: async (courseId, chapterId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/progress\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\",\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update chapter progress\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"Error updating chapter progress:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCourses: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses?published=all\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch courses\");\n            }\n            const result = await response.json();\n            console.log(\"Courses API response:\", result); // デバッグ用\n            // レスポンス形式のチェック\n            if (!result || !result.success || !Array.isArray(result.data)) {\n                console.error(\"Unexpected response format:\", result);\n                throw new Error(\"Invalid courses data format\");\n            }\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"Error fetching courses:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCourse: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch course: \".concat(response.statusText));\n            }\n            const data = await response.json();\n            return data; // レスポンスをそのまま返せる\n        } catch (error) {\n            console.error(\"Error in getCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getChaptersProgress: async (courseId)=>{\n        try {\n            console.log(\"【API呼び出し開始】getChaptersProgress\", {\n                courseId\n            });\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/progress\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch chapters progress\");\n            }\n            const data = await response.json();\n            // データ構造の詳細なログ\n            console.log(\"【ChapterProgress詳細】\", {\n                \"最終試験チャプター\": data.data.find((ch)=>ch.isFinalExam),\n                \"チャプターデータサンプル\": data.data[0],\n                \"全データ構造\": JSON.stringify(data.data, null, 2)\n            });\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Error fetching chapters progress:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // courses.ts に追加\n    trackChapterAccess: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/access\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to track chapter access\");\n            }\n            return {\n                success: true,\n                data: null\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getCurrentChapter: async (courseId)=>{\n        try {\n            // リクエスト前のデバッグ情報\n            const url = \"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/current\");\n            console.log(\"【リクエスト準備】getCurrentChapter\", {\n                エンドポイント: url,\n                コースID: courseId,\n                認証ヘッダー: getAuthHeaders(),\n                API基底URL: FRONTEND_API_BASE\n            });\n            // リクエスト実行\n            console.log(\"【リクエスト開始】getCurrentChapter\");\n            const response = await fetch(url, {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            // レスポンスステータスのデバッグ\n            console.log(\"【レスポンス受信】getCurrentChapter\", {\n                ステータスコード: response.status,\n                成功判定: response.ok,\n                レスポンスヘッダー: Object.fromEntries(response.headers.entries())\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current chapter: \".concat(response.status));\n            }\n            // レスポンスデータの解析\n            const data = await response.json();\n            console.log(\"【データ解析】getCurrentChapter\", {\n                成功: data.success,\n                データ存在: !!data.data,\n                データ内容: data.data,\n                メッセージ: data.message || \"メッセージなし\"\n            });\n            if (!data.success || !data.data) {\n                throw new Error(data.message || \"Invalid response format\");\n            }\n            // 成功時のレスポンス\n            console.log(\"【処理完了】getCurrentChapter - 成功\");\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            // エラー詳細のログ\n            console.error(\"【エラー発生】getCurrentChapter:\", {\n                タイムスタンプ: new Date().toISOString()\n            });\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    handleFirstAccess: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/first-access\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to handle first access\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Error in handleFirstAccess:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // コース作成\n    createCourse: async (data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        return {\n            data: result.data\n        };\n    },\n    // コース更新\n    // lib/api/courses.ts\n    updateCourse: async (courseId, data)=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.message || \"Failed to update course\");\n        }\n        const result = await response.json();\n        return result;\n    },\n    getChapterPeerSubmissions: async function(courseId, chapterId) {\n        let isEvaluationPage = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false // 新しいパラメータを追加\n        ;\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/peer-submissions?isEvaluationPage=\").concat(isEvaluationPage), {\n                method: \"GET\",\n                headers: {\n                    ...getAuthHeaders()\n                },\n                credentials: \"include\"\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message || \"Failed to fetch peer submissions\");\n            }\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error(\"Error fetching peer submissions:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Failed to fetch peer submissions\"\n            };\n        }\n    },\n    // コース削除\n    deleteCourse: async (courseId)=>{\n        await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        return {\n            success: true\n        };\n    },\n    // courses.ts に追加\n    getCurrentCourseState: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/current-state\"), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current course state\");\n            }\n            return await response.json();\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // 利用可能なコース一覧取得\n    getAvailableCourses: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/available\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch courses\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data // レスポンスの正しい構造に対応\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch courses:\", error);\n            return {\n                success: false,\n                data: [],\n                message: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // /lib/api/courses.ts に追加\n    getSubmission: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/submission\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"評価結果の取得に失敗しました\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"評価結果の取得に失敗しました\"\n            };\n        }\n    },\n    // コース開始\n    startCourse: async (courseId)=>{\n        try {\n            console.log(\"Sending start course request for:\", courseId);\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            const result = await response.json();\n            console.log(\"Start course response:\", result);\n            if (!response.ok) {\n                throw new Error(result.message || \"Failed to start course\");\n            }\n            return {\n                success: true,\n                data: result\n            };\n        } catch (error) {\n            console.error(\"Error in startCourse:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // ユーザーの受講コース一覧取得\n    getUserCourses: async ()=>{\n        const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/users/courses/enrolled\"), {\n            headers: getAuthHeaders()\n        });\n        const data = await response.json();\n        return {\n            success: true,\n            data: data\n        };\n    },\n    getCourseRanking: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/ranking/courses/\").concat(courseId), {\n                headers: getAuthHeaders(),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch course ranking\");\n            }\n            const data = await response.json();\n            // APIResponse 形式に整形して返す\n            return {\n                success: true,\n                data: {\n                    activeUsers: data.activeUsers,\n                    historicalUsers: data.historicalUsers,\n                    activeUserCount: data.activeUserCount\n                }\n            };\n        } catch (error) {\n            console.error(\"Error fetching course ranking:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters/\").concat(chapterId), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch chapter: \".concat(response.statusText));\n            }\n            const data = await response.json();\n            // レスポンスの形式をチェック\n            if (!data.success) {\n                throw new Error(data.message || \"Failed to fetch chapter data\");\n            }\n            return {\n                success: true,\n                data: data.data // バックエンドから返されるチャプターデータ\n            };\n        } catch (error) {\n            console.error(\"Error in getChapter:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error occurred\"\n            };\n        }\n    },\n    // チャプター完了処理\n    completeChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/complete\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to complete chapter\");\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Failed to complete chapter:\", error);\n            throw error;\n        }\n    },\n    // courses.ts\n    getCurrentUserCourse: async (courseId)=>{\n        try {\n            const endpoint = courseId ? \"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/progress\") : \"\".concat(FRONTEND_API_BASE, \"/courses/user/current\"); // 現在のコースを取得するエンドポイント\n            const response = await fetch(endpoint, {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch current course\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch current course:\", error);\n            return {\n                success: false,\n                data: null,\n                message: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // src/lib/api/courses.ts に追加\n    startChapter: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/start\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to start chapter\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // チャプター更新\n    updateChapter: async (courseId, chapterId, data)=>{\n        try {\n            console.log(\"チャプター更新リクエスト:\", {\n                courseId,\n                chapterId,\n                data\n            });\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters/\").concat(chapterId), {\n                method: \"PUT\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(data) // データをそのまま送信\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Failed to update chapter\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"チャプター更新エラー:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    updateMaterialProgress: async (courseId, chapterId, materialId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/materials/\").concat(materialId, \"/progress\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update material progress\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    createChapter: async (courseId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to create chapter\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // チャプター削除\n    deleteChapter: async (courseId, chapterId)=>{\n        await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].delete(\"/admin/courses/\".concat(courseId, \"/chapters/\").concat(chapterId));\n        return {\n            success: true\n        };\n    },\n    // チャプター順序更新\n    updateChaptersOrder: async (courseId, chapters)=>{\n        const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId, \"/chapters/reorder\"), {\n            chapters\n        });\n        return {\n            data: response.data.data\n        };\n    },\n    // 公開状態管理\n    publishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to publish course:\", error);\n            throw error;\n        }\n    },\n    toggleChapterVisibility: async (courseId, chapterId, isVisible)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/visibility\"), {\n                method: \"PATCH\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify({\n                    isVisible\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update chapter visibility\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // パーフェクトモードの切り替え\n    toggleChapterPerfectMode: async (courseId, chapterId, isPerfectOnly)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/perfect-mode\"), {\n                method: \"PATCH\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify({\n                    isPerfectOnly\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update perfect mode setting\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // チャプターのステータス情報を取得\n    getChapterStatus: async (courseId, chapterId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/status\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch chapter status\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    getActiveCourseUsers: async (courseId)=>{\n        try {\n            const response = await fetch(// パスを正しいものに修正\n            \"\".concat(FRONTEND_API_BASE, \"/courses/user/\").concat(courseId, \"/active-users\"), {\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch active users\");\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    unpublishCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isPublished: false\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to unpublish course:\", error);\n            throw error;\n        }\n    },\n    archiveCourse: async (courseId)=>{\n        try {\n            const response = await _auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(\"/admin/courses/\".concat(courseId), {\n                isArchived: true\n            });\n            return {\n                success: true,\n                data: response.data.data\n            };\n        } catch (error) {\n            console.error(\"Failed to archive course:\", error);\n            throw error;\n        }\n    },\n    reorderChapters: async (courseId)=>{\n        try {\n            const response = await fetch(\"/api/admin/courses/\".concat(courseId, \"/chapters/reorder\"), {\n                method: \"POST\"\n            });\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Error reordering chapters:\", error);\n            throw error;\n        }\n    },\n    resetChapterOrder: async (courseId)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/admin/courses/\").concat(courseId, \"/chapters/reset-order\"), {\n                method: \"POST\",\n                headers: getAuthHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to reset chapter order\");\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data\n            };\n        } catch (error) {\n            console.error(\"Error resetting chapter order:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    },\n    // courses.ts の submitTask メソッドを修正\n    submitTask: async (courseId, chapterId, data)=>{\n        try {\n            const response = await fetch(\"\".concat(FRONTEND_API_BASE, \"/courses/\").concat(courseId, \"/chapters/\").concat(chapterId, \"/submission\"), {\n                method: \"POST\",\n                headers: getAuthHeaders(),\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to submit task\");\n            }\n            const result = await response.json();\n            return {\n                success: true,\n                data: result.data\n            };\n        } catch (error) {\n            console.error(\"Task submission error:\", error);\n            return {\n                success: false,\n                data: null,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/courses.ts\n"));

/***/ })

});