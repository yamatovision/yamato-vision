generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")    // 追加
}

model User {
  id               String                     @id @default(cuid())
  email            String                     @unique
  password         String
  name             String?
  level            Int                        @default(1)
  experience       Int                        @default(0)
  gems             Int                        @default(0)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  status           UserStatus                 @default(ACTIVE)
  mongoId          String?                    @unique
  nickname         String?
  snsLinks         Json?
  careerIdentity   String?                    @db.VarChar(50) // 追加
  isRankingVisible Boolean                    @default(true)
  isProfileVisible Boolean                    @default(true)
  message          String?
  avatarUrl        String?
  rank             String                     @default("お試し")
  studentId        String?                    @unique // 学籍番号
  enrollmentYear   Int? // 入学年度
  totalCredits     Int                        @default(0) // 取得単位数
  gpa              Float? // GPA
  gradeHistory     GradeHistory[] // 追加
  comments         Comment[]
  experienceLogs   ExperienceLog[]
  forumPosts       ForumPost[]
  purchases        Purchase[]
  submissions      Submission[]
  tokenTracking    TokenTracking?
  badges           UserBadge[]
  mediaProgress    UserChapterMediaProgress[]
  chapterProgress  UserChapterProgress[]
  courses          UserCourse[]
}

// 成績評価履歴
model GradeHistory {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  grade       String // 秀、優、良、可、不可
  gradePoint  Float // 4.0, 3.0, 2.0, 1.0, 0.0
  credits     Int // 単位数
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model FinalExamProgress {
  id              String    @id @default(cuid())
  progressId      String    @unique
  examStartedAt   DateTime
  examCompletedAt DateTime?

  // セクション情報
  currentSection Int @default(1)

  // セクション1
  section1Title       String
  section1Score       Int?
  section1Feedback    String?
  section1SubmittedAt DateTime?
  section1Content     String?

  // セクション2
  section2Title       String
  section2Score       Int?
  section2Feedback    String?
  section2SubmittedAt DateTime?
  section2Content     String?

  // セクション3
  section3Title       String
  section3Score       Int?
  section3Feedback    String?
  section3SubmittedAt DateTime?
  section3Content     String?

  // 合計スコア
  totalScore Int?

  // リレーションを双方向に設定
  progress UserChapterProgress @relation(fields: [progressId], references: [id])

  @@index([progressId])
}

model Notice {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  menuContent String?   @db.Text
  startAt     DateTime
  endAt       DateTime
  type        String    // enumではなくString
  isActive    Boolean   @default(true)
  excludedRanks String[]
  minLevel    Int?
  buttonUrl   String?
  buttonText  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive, startAt, endAt])
}

// 学籍番号管理
model StudentIdCounter {
  id           String   @id @default(cuid())
  year         Int // 年度
  currentCount Int      @default(0)
  updatedAt    DateTime @updatedAt

  @@unique([year])
}

model Chapter {
  id               String                     @id @default(cuid())
  courseId         String
  title            String
  subtitle         String?
  orderIndex       Int
  timeLimit        Int? // コメントを更新: 制限時間（時間単位）
  isVisible        Boolean                    @default(true)
  isFinalExam      Boolean                    @default(false)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  taskId           String?                    @unique
  releaseTime      Int?
  content          Json
  taskContent      Json? // 公開用の説明（リッチテキスト）
  referenceFiles   Json? // 配列形式で複数の参考資料を管理
  isPerfectOnly    Boolean                    @default(false)
  experienceWeight Int                        @default(100)
  course           Course                     @relation(fields: [courseId], references: [id])
  task             Task?                      @relation("ChapterTask", fields: [taskId], references: [id])
  mediaProgress    UserChapterMediaProgress[]
  userProgress     UserChapterProgress[]
  examSettings     Json? // 追加: 試験設定用

  @@unique([courseId, orderIndex])
}

model Course {
  id                  String                @id @default(cuid())
  title               String
  description         String
  level               Int                   @default(1)
  rankRequired        String?
  levelRequired       Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  archivedAt          DateTime?
  isArchived          Boolean               @default(false)
  isPublished         Boolean               @default(false)
  publishedAt         DateTime?
  thumbnail           String?
  credits             Int?                  @default(1) // 単位数（1-4）
  gradeHistory        GradeHistory[] // 追加
  timeLimit           Int?
  canEarnHigherStatus Boolean               @default(true)
  chapters            Chapter[]
  products            Product[]
  tasks               Task[]
  chapterProgress     UserChapterProgress[]
  users               UserCourse[]
}

model UserCourse {
  id                       String    @id @default(cuid())
  userId                   String
  courseId                 String
  progress                 Int       @default(0)
  startedAt                DateTime?
  completedAt              DateTime?
  status                   String    @default("RESTRICTED")
  isTimedOut               Boolean   @default(false)
  timeOutAt                DateTime?
  certificationEligibility Boolean   @default(true)
  course                   Course    @relation(fields: [courseId], references: [id])
  user                     User      @relation(fields: [userId], references: [id])
  isCurrent                Boolean   @default(false) // カレントコース管理用
  currentChapterId         String? // 現在のチャプターIDを直接保持

  @@unique([userId, courseId])
}

model Task {
  id                 String       @id @default(cuid())
  courseId           String
  title              String?
  maxPoints          Int          @default(100)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  materials          String? // optional
  task               String? // これは必須（課題内容）
  evaluationCriteria String? // optional
  systemMessage      String? // XMLフォーマット済みの評価用データ
  chapter            Chapter?     @relation("ChapterTask")
  submissions        Submission[]
  course             Course       @relation(fields: [courseId], references: [id])
}

model Submission {
  id              String                @id @default(cuid())
  userId          String
  taskId          String
  content         String
  points          Int
  feedback        String
  nextStep        String?
  submittedAt     DateTime              @default(now())
  evaluatedAt     DateTime              @default(now())
  bestForProgress UserChapterProgress[] @relation("BestSubmission")
  task            Task                  @relation(fields: [taskId], references: [id])
  user            User                  @relation(fields: [userId], references: [id])
}

model ForumPost {
  id        String    @id @default(cuid())
  userId    String
  title     String
  content   String
  likes     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isVisible Boolean   @default(true)
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isVisible Boolean   @default(true)
  post      ForumPost @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model ChapterStateHistory {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  chapterId String
  status    String // ChapterProgressStatus
  createdAt DateTime @default(now())

  @@index([userId, courseId, chapterId])
}

model DailyMission {
  id          String   @id @default(cuid())
  title       String
  description String
  gemReward   Int
  expReward   Int
  type        String
  requirement Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mission {
  id          String         @id @default(cuid())
  title       String
  description String
  missionType MissionType
  duration    Int?
  conditions  Json
  isActive    Boolean        @default(true)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  reward      MissionReward?

  @@index([missionType])
  @@index([isActive])
}

model MissionReward {
  id        String   @id @default(cuid())
  missionId String   @unique
  gems      Int
  exp       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mission   Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([missionId])
}

model Product {
  id            String      @id @default(cuid())
  name          String
  description   String
  type          ProductType
  price         Int
  gemAmount     Int?
  courseId      String?
  rankRequired  String?
  levelRequired Int?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  course        Course?     @relation(fields: [courseId], references: [id])
  purchases     Purchase[]

  @@index([type])
  @@index([isActive])
}

model Purchase {
  id         String         @id @default(cuid())
  userId     String
  productId  String
  amount     Int
  totalPrice Int
  status     PurchaseStatus
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  product    Product        @relation(fields: [productId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model Badge {
  id          String         @id @default(cuid())
  title       String
  description String
  iconUrl     String
  condition   BadgeCondition
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, badgeId])
}

model UserChapterMediaProgress {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  position  Int      @default(0)
  deviceId  String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([userId, chapterId])
}

model TokenTracking {
  id                  String   @id @default(cuid())
  userId              String   @unique
  weeklyTokens        Int      @default(0)
  unprocessedTokens   Int      @default(0)
  lastSyncedAt        DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  purchasedTokens     Int      @default(0)
  weeklyLimit         Int      @default(0)
  totalTokensConsumed Int      @default(0)
  user                User     @relation(fields: [userId], references: [id])
}

model ExperienceLog {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  source    String
  detail    Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([source])
}

model LevelMessage {
  id        String   @id @default(cuid())
  level     Int      @unique
  message   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserChapterProgress {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  chapterId   String
  status      String    @default("NOT_STARTED")
  startedAt   DateTime?
  completedAt DateTime?
  score       Int? // 既存のscoreカラムを維持

  finalExam FinalExamProgress?

  currentSection   Int? // 追加: 現在のセクション管理用
  sectionScores    Json? // 追加: セクションごとのスコア保存用
  timeRemaining    Int? // 追加: 残り時間管理用
  sectionStartedAt DateTime? // 追加: セクション開始時間管理用

  // ベストスコアデータのみ保持
  bestTaskContent  String? // これを追加（ユーザーの実際の提出内容）
  bestFeedback     String?
  bestNextStep     String?
  bestEvaluatedAt  DateTime?
  bestSubmissionId String?
  bestSubmission   Submission? @relation("BestSubmission", fields: [bestSubmissionId], references: [id])

  isTimedOut      Boolean   @default(false)
  timeOutAt       DateTime?
  lessonWatchRate Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, courseId, chapterId])
  @@index([userId, courseId])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENALTY
}

enum MissionType {
  DAILY
  MONTHLY
  ACHIEVEMENT
}

enum MissionConditionType {
  REPORT
  COMMENT
  LIKE
  TASK_COMPLETE
  CUSTOM
}

enum ProductType {
  COURSE
  GEM_PACKAGE
  SPECIAL_ITEM
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BadgeCondition {
  LIKES_COUNT
  COURSE_COMPLETE
  TASK_COMPLETE
  POST_COUNT
  COMMENT_COUNT
  CUSTOM
}

model MasterAccessLog {
  id          String   @id @default(cuid())
  adminEmail  String   
  targetEmail String   
  accessedAt  DateTime @default(now())

  @@index([adminEmail])
  @@index([accessedAt])
}